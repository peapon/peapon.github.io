[{"title":"多层物料关联递归关联处理","date":"2020-04-19T10:57:19.000Z","path":"2020/04/19/多层物料关联/","text":"临时要处理一堆BOM相关的问题，但是一个个核对效率太慢，所以打算用Python写个小脚本解决这个问题。 问题背景某机型的全配BOM的层级是一个多级递进和回归的表格，表格示意如下 层级 料号 类型 名称 0 xxx xxxx xxx 1 xx xxx xxx 层级间的递进关系如图所示 要解决的问题和要达到的目的为了便于在物料处理过程中能够快速的反查底层物料影响哪一些模块，因此打算把数据导入到Access数据库，并用Parent ID的关系把他们串起来，便于反查。 因此就想简单的用Python写两个脚本来实现这个功能，其中比较难处理的就是前面说的这部分的处理。 因此对处理过程做一个记录，本文只对物料多层级关联处理这一部分。 用到的工具 Python 3.7 xlrd – 用来读取Excel数据 Visual Studio Code – Python IDE 处理过程这个问题的处理有两部分： 正向读取数据的后的物料之间的关联，这个比较简单，只需要记住上一层及的物料的料号作为父亲料号即可； 回溯时候的父亲料号处理： 从低层级物料回溯到高层级物料的处理，要使用高层级物料已经记录的父亲节点料号； 从回溯后的高层级物料分解是，要使用临近高层级的物料作为父亲物料 因此这里是处理的重点。 总结要处理这个问题，主要要用到的知识点是： Python 对Excel的处理，这里主要用到了读取的操作，比较简单，可以执行搜索； Python的字典，由于我没有用递归算法，递归在这里也不是很实用，所以我用到了字典来处理，字典就是‘键-值’对； 对于已经出现过的层级，记录在字典中，当搜索进行到下一层级时，取上一级作为父亲节点； 当回溯时，从字典中取出已经存在的父亲节点的料号，即可完成处理。 处理的示例代码 xlrd1234567891011121314151617181920212223242526272829303132import xlwtdict = &#123;0:&quot;&quot;&#125;pre_level=0pre_id=&quot;&quot;cur_level=0cur_id=&quot;&quot;parent_id=&quot;&quot;data = xlrd.open_workbook(&quot;/Volumes/Doc/code/test.xls&quot;)table = data.sheets()[0] #通过索引顺序获取print(table.nrows)print(&quot;-------------current--------------&quot;)for i in range(0,table.nrows): rvalue = table.row_values(i) cur_level = rvalue[0] cur_id = rvalue[1] print(&quot;curleve:%d, curid:%s&quot;%(cur_level,cur_id)) if cur_level &gt; pre_level: dict[cur_level]=pre_id parent_id = dict[cur_level] pre_level = cur_level pre_id = cur_id print(&quot;Current Level:%d, Current ID:%s, Parent ID:%s&quot;%(cur_level,cur_id,parent_id))print(&quot;-------------current--------------&quot;)print(&quot;Dict&quot;)for key in dict: print(&quot;key:%d, value:%s&quot; %(key,dict[key]))","tags":[{"name":"Python","slug":"Python","permalink":"https://peapon.github.io/tags/Python/"}]},{"title":"Axure 幻灯片轮播实现--简略版","date":"2020-04-12T10:15:24.000Z","path":"2020/04/12/Axure-幻灯片轮播实现-简略版/","text":"步骤 在页面中添加”动态面板” 为“动态面板”添加“状态” 每一个“状态”中添加一个“图像”区 在“图像”区中载入本地图片 为页面添加一个“页面载入”的交互 详细描述和截图添加动态面板添加动态面板，添加动态面板后双击动态面板进入到面板编辑模式 添加状态 添加图像图片添加这里分两步 添加图像控件 导入图片，见后边两张图 为页面新建交互 页面新建交互的属性是： 交互事件：页面加载 交互目标：设置面板状态 面板状态切换：下一项 进入和退出动画：向左移动（可以自行根据需要设置） 动画时间：3000ms 循环时间：3000ms 如此一来，就实现了Axure 来做一个幻灯片轮播的效果了。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"浅谈用户思维","date":"2019-05-28T23:14:47.000Z","path":"2019/05/29/浅谈用户思维/","text":"最近几个月，iM3产品团队一直扑在了包括在中国、土耳其、西班牙、泰国等不同地域、不同医院、不同客户需求的10来个项目上，虽然项目各不相同，但他们都有一个共同的特点——就是都在用iM3为临床客户创造价值、简化工作、提高效率。 “这就是有价值的创新。”在厦门某三甲医院护理部主任试用了iM3之后如是评价，这是一个来自于终端客户对iM3中所包含的用户思维的肯定。 什么是用户思维我想先从4月底的产品经理交流会上的一个案例开始来探讨什么是用户思维。 请大家思考这样一个问题：你购买iPhone的原因是什么？ 现场有两个答案： 为什么需要用户思维如何才能拥有用户思维虽然到现在我还不能说iM3 取得了全面的胜利，但用户思维已经取得了全面的胜利。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"7Edit 安装和使用","date":"2019-05-26T16:18:06.000Z","path":"2019/05/27/7Edit-安装和使用/","text":"","tags":[]},{"title":"为什么要创建EMR 信息化(MedCon)","date":"2019-05-26T11:46:46.000Z","path":"2019/05/26/为什么要创建EMR-信息化-MedCon/","text":"起源背景我本人是在医疗器械企业的研发部门工作的，从事研发和产品相关的工作近10年，我的经历可以大致分为下面几个阶段： 软件开发，软件工程师，负责基于Windows平台的软件的研发； 项目管理，软件工程师&amp;软件项目经理，人少则仕，项目经理跑了，就要去做项目管理的工作； 需求管理，需求管理与产品稍微挂钩，做一个简单的尝试。 我这些年的工作，多多少少都涉及到一个共同的话题——医疗信息化，也许这正好就是这几年的势头。当然，我在所服务的企业内部也经历了信息化发展的几个阶段： 发端，由当时我的上级编写的一个简单HL7程序，而我去实施的首个案例； 发展，在实施了几个案例后，我们发现我们的方案的缺陷，我带头调研了北美市场的EMR状况及IHE等进展，并提出开发网关的设想并得到实施； 战略提升，截止到我们规划的一款产品上市时，公司已经把公司产品的信息化和设备的互操作性提升为公司战略。 为什么EMR 信息化既然我所服务的企业都已经把信息化上升为企业战略了，那为什么现在才创建这个EMR 信息化呢，原因很简单，我们并没有一个完全成熟的解决方案。我目睹了公司信息化产品的发展，了解其中的艰难，知道其中的弯路，而且还要帮助提升产品的信息化程度，所以，希望借用一些公开平台作为载体，记录学习和实施过程中的一些要点，以帮助后续需要用到这些信息的人。我所披露的都是公开和公有的信息，我相信业界一定有科学家一样的大神存在，但我还是想系统的归纳，作为后续其他人查找信息的入口。 目标EMR 信息化的目标，是为了在中国创建一个更好的解读国内外信息化标准的技术交流平台。 内容EMR信息化初期规划的内容包含以下几部分： Mirth Connect的使用和解析； HL7简要解析； 中国医院信息互联互通标准解析； HIMSS初步解析； ATSM解析； IEC 11073标准的解析。 对于医疗信息化标准的解析，国内的厂商多数是处于封闭的发展状态，而且很多时候也没有精力去做这一块，所以国内真正要找一块信息化相关的内容，难度还是不小的，我希望能够通过我的努力，稍微改善一下这样的状况。这一系列的事情，我会根据我解读的情况，以系列文章的形式来整理出来，最终能到什么程度我也不清楚，所以我会选择一个难度最小的，也就是Mirth Connect入手。 假定我假定读这些文章的人对医疗信息化、HL7这些东西都有一个简单的了解，至少听说过，因此在有些术语上，我不会特别深入的去解释。","tags":[{"name":"医疗信息化","slug":"医疗信息化","permalink":"https://peapon.github.io/tags/医疗信息化/"}]},{"title":"读《情商管理课——优秀的人如何掌控情绪》","date":"2019-05-11T01:05:08.000Z","path":"2019/05/11/读《情商管理课——优秀的人如何掌控情绪》/","text":"在一次偶然的机会，应该是图书打折的机会，我买到了左岸老师编著的《情商管理科——优秀的人如何掌控情绪》这本书。说实话，我对这本书的期望还是蛮大的，因为我不是一个优秀的人，而且变成一个优秀的人是大家共性的追求，所以我是满怀期待读完这本书的。先给这本书定个位，这是一本鸡汤加故事会，当然，这是这种书的典型套路，说一个鼓舞人心的道理当然需要一个相辅相成的故事，因此在了解清楚这本书的定位后，去读这本书就轻松很多了。这并不是说这本书读完对我没有帮助，帮助还是有的。首先，这本书的框架是这样的：认识自己，管理情绪，激励自己；认识他人，善待他人，创造美好的人际关系，这说的很有道理啊，这就是一个人变得受欢迎的标准公式啊：认识自己，善待他人。那么书中有哪些我觉得有意思的呢？认识他人，我觉得每一点说的都很有道理，当我把左岸老师提出的那些点放回到自己身上时，仿佛又对我自己有了重新的认识，所以我摘录一下： 认识他人的小窍门眼神（看）眼睛是心灵的窗户嘛，透过窗户就能观察到很多事情了。那么如何从眼神中读出他的含义呢： 眼神镇定，表示对方胸有成竹，也就是淡定，泰然自若； 眼神散乱，表示六神无主，也许是面临巨大困难需要帮助； 眼神阴沉，表示对方心情欠佳，不要招惹。 听说话的弦外之音（听）说话都是有目的的，打发时间？获取同情？获取帮助？抱怨？等等，总之，说话就是有目的的，而往往说话很多时候都不会直接了当，很多时候都有些保留，尤其是在不太熟悉的人之间的交际的时候，那么要怎么听出对方的心声呢： 反常，如果一个人平时不会轻声细语，而突然反常，事出突然必有妖嘛，这个时候就静静的听吧； 如果一个人总爱牢骚和跟别人聊天，那么这个人缺乏主见； 说话时眼神飘忽不定，坐立不安，那么这个人在这种场景下缺乏自信； 如果对方欲言又止，那就需要追问一下啦。 习惯动作（看）人都有习惯性的动作，咬手指、双手抱胸、抹鼻子等等等等，每一样呢都以自己的意思，左岸老师指导我们可以通过观察这些小动作去观察别人，认识别人： 指手画脚的人易冲动； 经常以手掩口的人易情绪低落； 时常轻拍别人肩膀的人显然比较骄傲； 经常把指关节弄得啪啪响的人，对面对的事情充满恐惧； 抓头发的人易健忘，易受情绪支配； 拖着鞋走路的人意志易消沉，易得过且过。 好像都有点道理。 声音（听）声音的频率可以反应一个人的内心活动和状态，悠然自得的声音和充满恐惧的声音显然是不一样的，这个很容易理解，那怎么通过声音去了解他人呢： 说话声音凝重且深沉，情绪稳定，一般知识广博，思想成熟； 声音锋利尖锐，情绪一般不稳定，具备极强的攻击性； 声音刚毅，情绪比较健康，有很强的纪律性和组织性； 声音圆滑而缓和，情绪平稳，不容易大起大落，为人诚恳、认清，具同理心，处事圆滑，容易受他人指责； 声柔而顺畅，性格温和，淡泊名利，与世无争，希望过得平淡； 声音急躁，情绪不好，易怒，易生气，做事没有详尽计划安排，急于求成。 有点像算命。 倾听（听）所有管理学、沟通课程，都会告诉你倾听的重要性，那么能听出什么呢？ 说话者的人品； 说话者意向； 说话者的见识和学识； 说话者的气质。 认识他人的小窍门，总结来说，多看，多听，少说。好了，我就写这么多，所以呢，多读书，还是有好处的，一本无论是怎么样的书，总有一个让你有所收获的地方","tags":[{"name":"自我管理","slug":"自我管理","permalink":"https://peapon.github.io/tags/自我管理/"}]},{"title":"一个假产品经理对产品经理的理解","date":"2019-05-02T13:53:48.000Z","path":"2019/05/02/一个假产品经理对产品经理的理解/","text":"我是2014年底至2015年除被秦工从中央站拽过来做需求管理的，细数过来也有几个年头了，在这几年中，也做了几款产品的规划和需求管理工作。虽然我一直不知道秦工看中我身上什么特质，但在做需求管理这几年中，确实给予了我很大的帮助。如果说中央站是我涉及到产品管理的开端，那么从开发转岗需求管理是真正开始深入的涉猎产品管理。为什么没有用进入或者是精通产品管理呢，因为至今我都觉得我所做的，也只是产品很少的一部分。那说道对产品管理具体的认识的话，要回溯到2015年，秦工在需求组后边那个小角落跟我们需求组几个人开了一个非正式的会议说，你们需求组要做的是：产品策划、需求管理、产品发布、抱怨跟踪、产品改进，这不就是产品管理的全过程吗？而从事需求管理这些年，需求组的同事确实在做其中的一部分工作，所以我们一直都自封为Fake Product Manager，要管的多，实际写到职能的少，所以是Fake的，有时候，我也能接到组内同事的投诉，为什么我们要管这么多。接下来我就我个人的经验来谈谈，我们为什么要管这么多。 好的产品本来的样子4月底，邱总邀请了一直跟我们合作不错的合作公司的产品经理Michael Gao来给我们做了一次产品管理的分享，会上Michael问了一个很有趣的问题 到临床中去毛主席说过：“在我党的一切实际工作中，凡属正确的领导，必须是从群众中来，到群众中去。” 摇滚的力量我在谈摇滚的时候，不是在谈摇滚，而是要讲一个故事。 做好“传声筒”我在谈传声筒的时候，不是在说传声筒，而是在讲需求管理。 客户爽一点，自己苦一点我在谈让客户爽一点，自己苦一点的时候，真的是在谈让客户爽一点，自己苦一点。 吃水不忘挖井人我在谈挖井人的时候，我就是在谈开发团队。 结语:人人都是产品经理，人人都须是产品经理。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"MWeb外部模式的图片文件夹处理","date":"2019-04-21T04:51:38.000Z","path":"2019/04/21/MWeb外部模式的图片文件夹处理/","text":"这段文字来源于官方的帮助，详见：MWeb外部模式的详细应用 引入文件夹到 MWeb 中的办法如下图，按 CMD + E 打开外部模式，然后点击左下角的 “+” 按钮，选择要引入的文件夹即可。 另外，你还可以直接把文件夹拖拽到左边的文件夹树形列表中，也可以引入文件夹。还有一种方法就是：直接把文件夹拖拽到 MWeb 的图标中，也可以引入文件夹。 配置引入的文件夹引入文件夹后，还有一项重要的设置，就是引入文件夹的设置，可以右键引入的文件夹，然后选择 编辑，就会显示如下图的界面： 一个设置是 “显示名称”，这个是引入的文件夹所特有的，你修改这个名称不会修改到文件夹的名称。还有几个比较重要的设置，都是跟插入图片相关的，第一个就是 “保存插入的图片的文件夹名称：”，这个一看就知道意思，这个跟下面的 “插入的图片的保存位置” 相关联，这个只有 “绝对位置” 与 “相对位置” 两个选项。举个例子，比如说我引入的文件夹为 A，然后有一文件在 “A/folder/file.md” 下，我如果在 “file.md” 中插入一张名为 “pic.jpg” 的图片，则不同的选项的结果为： 相对位置：图片会保存在 “A/folder/media/pic.jpg”，然后生成的 Markdown 为：。绝对位置：图片会保存在 “A/media/pic.jpg”，生成的 Markdwon 为：![](/media/pic.jpg。另外一个设置：“把插入的图片自动上传至…”。如果勾选了这个选项，那么上面的设置就无效了，因为你插入的图片都会自动上传至所选择的图片上传服务，然后返回 Markdown 语法。 根据这个特性，可以让 MWeb 很好地支持 Octpress、Jekyll、hexo、gitbook、VuePress 等等静态网站生成工具的图片插入、预览和管理。 管理引入后的文件夹文件夹引入后，就可以使用右键对引入的文件夹和文件进行一些常用的操作，如下图所示。","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"在macOS Mojave上搭建树莓派的Qt开发环境","date":"2019-04-20T14:39:27.000Z","path":"2019/04/20/在macOS-Mojave上搭建树莓派的Qt开发环境/","text":"做这件事的原因有两个：第一是，接上一篇《为树莓派3B+编译Qt 5.11.2》中的Ubuntu 18.10是在虚拟机中搭建的，所以每次要进行开发时，都需要再启动一个虚拟机，有点麻烦，不想这样做，也就是懒；第二是，Mac是Unix-like系统，理论上只要找到合适的编译器，也就可以在Mac上配置环境而使用在虚拟机中编译的Qt。所以带着勇闯雷区的勇气就开始了我的尝试之旅了。 树莓派部分树莓派部分我们已经在Ubuntu中做好了一切准备，所以我们不需要再做什么了，具体参考为树莓派3B+编译Qt 5.11.2。\u0001 主机准备我的电脑的信息如下： 工作目录和工具链准备这部分的工作呢，和在Ubuntu上准备是一样的，具体如下： 123mkdir ~/raspicd ~/raspigit clone https://github.com/raspberrypi/tools 虽然我们不用tool下的gcc编译器，但我不确定是否用到其他环境，所以我们还是完整的下载。 准备正确的工具链和sysroot下载Mac下用的工具链armv8-rpi3-linux-gnueabihf-gcc-8.1.0-macos-high-sierra这个工具链是在mac下可以使用来编译Qt的交叉编译器,先git clone下这个工具链。 1git clone git@github.com:yc2986/armv8-rpi3-linux-gnueabihf-gcc-8.1.0-macos-high-sierra.git 下载完工具链后，把armv8-rpi3-linux-gnueabihf拷贝到~/raspi/tools目录下。 准备sysroot还是需要在raspi下创建sysroot，并同步树莓派上面的库 12345mkdir sysroot sysroot/usr sysroot/optrsync -avz -e &quot;ssh -p 22&quot; pi@raspberrypi.local:/lib sysrootrsync -avz -e &quot;ssh -p 22&quot; pi@raspberrypi.local:/usr/include sysroot/usrrsync -avz -e &quot;ssh -p 22&quot; pi@raspberrypi.local:/usr/lib sysroot/usrrsync -avz -e &quot;ssh -p 22&quot; pi@raspberrypi.local:/opt/vc sysroot/opt 把raspberrypi.local换成树莓派的IP。还有一种办法就是直接同步Ubuntu 下配置好的sysroot，具体方法如下： 1rsync -avz -e &quot;ssh -p 22&quot; penn@Penn 92.168.3.113:/home/penn/raspi/sysroot ./ 这条命令是把Ubuntu端的sysroot同步到Mac的raspi目录。 还有一步非常非常重要的步骤，不然编译器的环境不完整，需要将~/raspi/tools/armv8-rpi3-linux-gnueabihf/armv8-rpi3-linux-gnueabihf/sysroot下所有的目录及文件拷到~/raspi/sysroot下，选择合并处理。 编译Qmake下载源代码 123wget http://download.qt.io/official_releases/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xztar xvf qt-everywhere-src-5.11.2.tar.xzcd qt-everywhere-src-5.11.2 做完前面的工作，mac端的编译环境就准备好了，我们需要用到qt的编译器qmake，这个需要我们自己编译出来，步骤不重复叙述，configure要说一下。 1./configure -release -no-opengl -device linux-rasp-pi3-g++ -device-option CROSS_COMPILE=~/raspi/tools/armv8-rpi3-linux-gnueabihf/bin/armv8-rpi3-linux-gnueabihf- -sysroot ~/raspi/sysroot/ -opensource -confirm-license -skip qtwayland -skip qtlocation -skip qtscript -make libs -prefix /usr/local/qt5pi -extprefix ~/raspi/qt5pi -hostprefix ~/raspi/qt5 -no-use-gold-linker -v -no-gbm 这里注意，我们用了-no-opengl选项，因为我们在Ubuntu上已经编译了，而且这里我们也只是需要生成一个qmake及相关环境，我们并不用mac下编译出来的库。 12make -j4make install 做完上面的步骤后，执行下面的命令确认是否正确编译了qmake 12cd ~/rasp/qt5./bin/qmake -v 如果正确编译了qmake，能够得到下面的信息 QMake version 3.1 配置开发环境QtCreator的配置是跟Ubuntu下是一样的，参考为树莓派3B-编译Qt-5-11-2/#搭建开发环境 GDB要特别说明一下，这里的GDB有点区别，GDB设置的路径为 1/usr/local/Cellar/gdb/8.2.1/bin/gdb 测试环境是否可用创建一个Qt Widgets Application名字为WidgetsDemo，然后编译执行，在VNC到树莓派，可以看到我们的程序已经上传到输煤派了。 好了，到这里在macOS mojave下搭建Qt的交叉编译环境也就完成了，希望你也能成功。","tags":[{"name":"Rasp","slug":"Rasp","permalink":"https://peapon.github.io/tags/Rasp/"}]},{"title":"RX 580解决270度旋转问题","date":"2019-04-17T11:15:15.000Z","path":"2019/04/17/RX-580解决270度旋转问题/","text":"暂时没解决。","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"为树莓派3B+编译Qt 5.11.2","date":"2019-04-17T05:49:47.000Z","path":"2019/04/17/为树莓派3B-编译Qt-5-11-2/","text":"概述信息最近因为一个项目的原因，接触树莓派，觉得有意思，买了一个板子来自己玩，同时最近在了解QT开发，所以，就趁此机会尝试编写可以在树莓派上运行的程序。 环境准备树莓派我选择了树莓派3B+，这块板子的性能更高，因此可玩性可能更好一些，购买可以选择去马云家，搜索下有很多，具体的配置如下： 交叉编译主机Mac： 本来准备在Mac上交叉编译，并搭建相关开发环境，在参考qt-rpi-macos的指导编译后，在Mac上编译的程序没有EGL，配置起来很复杂，所以选择放弃。Ubuntu 18.04： 后来又跟着Cross-compile and deploy Qt 5.12 for Raspberry Pi这篇指导进行Qt编译和开发环境搭建，Cross-compile and deploy Qt 5.12 for Raspberry Pi的指导是在OpenSUSE 上进行的，我对Ubuntu比较熟悉，所以我选择了Ubuntu。 Qt版本Cross-compile and deploy Qt 5.12 for Raspberry Pi的中使用了Qt 5.12.0版本，但我在编译的过程中，使用Qt 5.12.0编译有问题，所以选择了5.11.2。 总结一下环境： 树莓派3B+ Ubuntu 18.04 Qt 5.11.2 编译Qt树莓派端的工作树莓派基础环境准备第一步是安装树莓派，这个教程度娘家一堆，这里不重复，自行百度。 第二步是更新树莓派，以保证有最新的库，这步很重要，必须这样做，否则没有最新的库和包含文件，是没办法进行后边的操作的。 12sudo rpi-updatereboot 同时，在树莓派上配置打开VNC和SSH，可以选择用树莓派的图形界面或者是使用 1sudo raspi-config 为树莓派安装开发库为了编译Qt，我们需要安装一些必须的库文件，因为需要安装一些源文件包，因此，需要将 deb-src 的这个源启用，具体的启用方法是修改 /etc/apt/sources.list 。 1sudo nano /etc/apt/sources.list 效果如下图，要把 deb-src前面的 “#”去掉，保存后执行以下命令。 1234sudo apt-get updatesudo apt-get build-dep qt4-x11sudo apt-get build-dep libqt5gui5sudo apt-get install libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0 上面这端代码是为树莓派安装必要的库，后边编译需要用到。 在树莓派创建QT编译后的目标文件夹在树莓派端创建如下文件夹和修改相应的权限，现在只是创建文件夹，还什么都不需要做。 12sudo mkdir /usr/local/qt5pisudo chown pi:pi /usr/local/qt5pi 主机端的工作准备工作目录和工具链要创建一个文件夹，可下载一个工具链，如果提示git没有安装，用sudo apt-get install git安装一下就可以。123mkdir ~/raspicd ~/raspigit clone https://github.com/raspberrypi/tools 创建和配置sysroot这个sysroot文件夹非常重要，我们要用这个文件夹把编译QT，以及后期开发所需的库同步过来，先在主机创建下面的文件夹 1mkdir sysroot sysroot/usr sysroot/opt 然后我们需要同步树莓派中的库文件和包含文件，我们使用rsync命令 1234rsync -avz pi@raspberrypi_ip:/lib sysrootrsync -avz pi@raspberrypi_ip:/usr/include sysroot/usrrsync -avz pi@raspberrypi_ip:/usr/lib sysroot/usrrsync -avz pi@raspberrypi_ip:/opt/vc sysroot/opt raspberrypi_ip是你的树莓派的IP地址。同步完的效果是这样的： 接下来，调整一下符号链接，因为目录下的文件是从树莓派同步过来的，链接部分都是失效的，需要重新链接 123wget https://raw.githubusercontent.com/riscv/riscv-poky/master/scripts/sysroot-relativelinks.pychmod +x sysroot-relativelinks.py./sysroot-relativelinks.py sysroot 下载Qt在我参考的指南中，作者使用的是5.12.0版本的QT，我尝试过，并没有成功。所以我尝试换了一个版本5.11.2就成功了，所以我推荐你参考我的指南来走 123wget http://download.qt.io/official_releases/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xztar xvf qt-everywhere-src-5.11.2.tar.xzcd qt-everywhere-src-5.11.2 到这里，编译前的准备工作都已经做完了了，接下来就是进入到编译的过程了。 为Qt交叉编译进行配置因为在Raspbian stretch版本中，使用了EGL，不过呢，使用了一个别的名字brcmEGL，具体方法如下：编辑./qtbase/mkspecs/devices/linux-rasp-pi3-g++/qmake.conf中的-lEGL修改为-lbrcmEGL，以及修改-lGLESv2为-lbrcmGLESv2，保存之后，使用下面的命令进行配置。 1./configure -release -opengl es2 -device linux-rasp-pi3-g++ -device-option CROSS_COMPILE=~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- -sysroot ~/raspi/sysroot -opensource -confirm-license -skip qtwayland -skip qtlocation -skip qtscript -make libs -prefix /usr/local/qt5pi -extprefix ~/raspi/qt5pi -hostprefix ~/raspi/qt5 -no-use-gold-linker -v -no-gbm 编译和安装QtConfigure运行完，如果你看到下面的提示，则表示环境配置没有任何问题，可以进行编译和安装了。 Qt is now configured for building. Just run ‘make’.Once everything is built, you must run ‘make install’.Qt will be installed into ‘/home/penn/raspi/qt5pi’. Prior to reconfiguration, make sure you remove any leftovers fromthe previous build. 编译和安装需要多久是根据你电脑的性能的，我是用下面的命令来编译的，大概编译了2~3个小时。 12make -j4make install make install后，实际上qt是安装在本地的qt5pi目录的，需要将这个目录上传到树莓派，还是使用rsync命令 1rsync -avz qt5pi pi@raspberrypi_ip:/usr/local 如果你顺利执行到了这一步，表示你的Qt已经编译安装成功，接下来可以进行开发环境的搭建了。 搭建开发环境开发环境创建和配置其实就两件事情，第一是连上你的树莓派，第二是配置之前编译出来的Qt的环境来编译程序 创建远程设备在QtCreator的 工具-&gt;选项 下选中 设备，添加一个新的通用Linux设备进行配置，具体见下图在设备的域名或者IP地址中填入树莓派的IP，用户名为pi，密码填写树莓派的密码。注意： 这个是用ssh进行远程访问的，要确保树莓派的ssh是打开的。 配置完成应该能够看到如下的画面： 配置编译器和Qt版本为了让我们开发的程序能够在树莓派上运行，我们需要使用适合树莓派的交叉编译器，在QtCreator中，我们要用到编译Qt的编译器，具体方法如下：在QtCreator的 工具-&gt;选项 下选中 构建和运行 添加gcc编译器，编译器的路径为1~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc 添加一个G++编译器，编译器路径为1~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-g++ 设置GDB切换到 Debuggers添加Debugger，这里要注意，我使用~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gdb时，会报错，无法使用，因此我使用了gdb-multiarch。 1sudo apt-get install gdb-multiarch 之后再Debuggers中添加一个gdb-multiarch，路径为 1/usr/bin/gdb-multiarch 设置qmake切换到QtVersions页面，添加一个新的Qt版本，选择刚编译出来的qmake即可，路径为 1~/raspi/qt5/bin/qmake 设置kit在 构建套件(Kits)页面，添加一个新的Kit，设置如图上的那些信息，在完成这一步后，QtCreator的编译环境也设置好了，可以开始编程了。 开始开发在QtCreator中创建一个Qt Widgets Application程序来测试我们的环境到底有没有设置好。 设置上传路径我使用的QtCreator版本（4.5.2）创建出来的项目.pro文件，只有默认的部署路径/opt/，pi用户在树莓派上没有这个目录的写入权限，所以我们要改目录，在.pro文件中加入如下代码 1target.path = /home/pi/$$&#123;TARGET&#125;/bin !isEmpty(target.path): INSTALLS += target 然后编译执行，出现下面的信息，表示程序上传成功Starting /home/pi/WidgetTest/bin/WidgetTest… Unable to query physical screen size, defaulting to 100 dpi.To override, set QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT (in millimeters). 用VNC登录到树莓派，可以看到我们的程序是上传成功的，运行也可以看到Qt的图形界面。 链接库文件有时我们的程序需要用到树莓派使用的一些库文件比如wiringPi，在我们需要的使用，在.pro文件中加入如下的代码就可以了 1LIBS += -L/usr/lib -lwiringPi 到这一步呢，表示我们已经成功的搭建了树莓派在Ubuntu 18.10中的QtCreator的Qt开发环境了，可以进行图形界面的开发了。","tags":[{"name":"Rasp","slug":"Rasp","permalink":"https://peapon.github.io/tags/Rasp/"}]},{"title":"临床数据检测工具","date":"2019-03-16T15:04:48.000Z","path":"2019/03/16/临床数据检测工具/","text":"方案一：视频读取一、知识和环境准备1、使用QT提取视频帧https://blog.csdn.net/jxbinwd/article/details/81034339 2、进行图像识别QImage类使用 https://blog.csdn.net/jxbinwd/article/details/81034339 3、OpenCV + QT环境搭建https://blog.csdn.net/qingyang8513/article/details/80339550https://blog.csdn.net/zbw1185/article/details/82469496 4、OpenCV进行图像识别https://www.cnblogs.com/farewell-farewell/p/5887068.html 5、读取和播放视频https://blog.csdn.net/obervose/article/details/70038901https://blog.csdn.net/mars_xiaolei/article/details/83317032 6、QT基础https://blog.csdn.net/qq769651718/article/details/79357869 7、打开文件https://blog.csdn.net/zl_95520/article/details/82687556 8、Machttps://www.cnblogs.com/xiaomanon/p/3930242.html 二、需求和方案1、需求1st. 读取本地视频，使用摄像机拍摄，格式为？？ 2nd. 预览视频，要能够预览视频，方便定位和框选 3rd. 能够移动视频的时间轴，通过鼠标拖动和点选，直接定位到相应的时间 4th. 框选视频上指定区域为某一特定参数 5th. 在4th后，输入参数的名称 6th. 分析数据，分析的数据存入到一个csv文件中，格式为 时间,参数1，参数2，……参数n 2、设计这是一个比较简单的软件，思路比较简单总体设计如下：a、主加载模块，用于总体的加载和文件存储的控制等；b、视频播放控制模块，用于视频加载、播放、暂停、进度条读取等方面，使用opencv；c、图像抓取和分析模块，用于抓取图像和分析图像来提取图像中的数字和参数，使用opencv；d、文件存储模块，用于存储csv或用于存储数据库。 3、进展1、主加载模块完成度20%；2、视频播放控制模块完成进度40%；","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"创新管理学习感悟","date":"2018-07-07T11:28:57.000Z","path":"2018/07/07/创新管理学习感悟/","text":"从创新奖开始谈起我所服务的企业有创新奖评选的活动，不得不说这是一个好的活动，说明了企业的管理者对创新的重视，并从实际行动上给予了鼓励。 创新奖的评选是每季度一次，年度一次大奖，每季度所评选的创新奖的冠、亚、季军都可以获得一小笔现金奖励，有时候可能够团队成员去吃一顿好的。而年度的冠、亚、季军则可以获得更好的奖励。 创新奖的评选方法呢，则是各个产品线推举，每到每个季度末时，研发系统总会要求各产品线推举产品线的一到三各创新进入评选，但是不能过多。 虽然我自己负责的项目也拿过一次季度的创新奖，但我始终觉得我们的创新奖的评选活动实际上是怪怪的。 直到最近我在一次成海清博士的培训中接触到这样的一些问题： 问题描述 是否存在 1. 突破性的产品创意很少，或者创意虽然多，但都很平庸，难以对众多产品新创意进行有效的筛选与评审。 2. 公司没有专人负责市场研究工作，对客户需求理解不系统、不完整、不深入、不正确，闭门造成现象严重，开发出来的产品难以满足客户需求。 3. 没有将客户需求有效的转化为产品功能定义，开发出的产品冗余功能多，产品稳定性差，产品成本高，市场竞争力不强。 4. 项目可行性分析不严谨，在开发过程中经常发现关键原材料难以采购，开发出来的产品难以生产或难以维护，新产品开发项目中途夭折多，或者开发进度总是大幅延期，延误上市时机。 5. 新产品项目决策评审缺乏规范的评审流程和科学的评审员额，老板个人说了算或者只是形式上的集体觉得，很多没有“钱景”的项目进入开发流程，新产品投资回报率低。 虽然上面表格中的”算命式”的问题总会让人产生一些共鸣或把自己投射进去，但是作为需求管理者，整理创新（创意）管理中存在的问题和可以改进的点是一件很重要的事情，这也是我在这次培训中获得的感悟，因此，后文将从以下几方面来展开谈创新管理： 创意管理的过程概述 创意数量是关键 用科学的方法筛选创意和管理创意 创意的实施 对创意的激励方法的浅析 创意管理的过程概述这里有一个很好的冷幽默：如果把现在的大多数项目分成前、中、后三个段，大多数情况是这样的： 前 中 后 很薄弱 很强大 没人管 很大部人对这个也会产生通过，确实是因为很多的产品前端调研不充分，但花很大精力去投入，一旦项目完成，开发团队解散呢，确实没人管，这可以叫项目式的产品管理，其实这是要不得的。我就碰到过一个真实的案例是一个产品上的很重要的物料停产10个月，除了采购无人知晓，采购的处理方法是囤货，就没有进一步的动作了。 还是要说回创新（创意）管理，如果把产品的生命周期分成前述的三个阶段，那么创新（创意）的管理是要贯穿项目开发各阶段的。 这是一个前端管理的过程，很多企业，很多人能够意识到应该这么做，那么具体实施得如何，效果如何，还有待考察。 论创意的数量和多面性的重要性创意的质量和筛选方法如何让创意变成现实对创意的激励的方法浅析","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"浅谈马斯洛需求层次理论","date":"2018-07-07T11:22:56.000Z","path":"2018/07/07/浅谈马斯洛需求层次理论/","text":"故事：我弟弟的故事，不安定和浮躁 马斯洛需求层次理论生理层次需求的影响自我实现的需求人性在现实面前的败退的担忧","tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://peapon.github.io/tags/杂谈/"}]},{"title":"【转载】高效演讲——一本书彻底解决演讲问题","date":"2018-07-05T13:51:33.000Z","path":"2018/07/05/【转载】高效演讲——一本书彻底解决演讲问题/","text":"这是一篇笔记和对《高效演讲》的解读，文章写得非常好，感谢原作者，请点击这里查看原文链接 演讲为什么可怕人都有过可怕的演讲经历，因为当你走到台前看到很多眼睛时，我们大脑中原始的杏仁体会提醒我们要小心，因为在原始社会，被这么多眼睛盯着，就意味着要被吃了。杏仁体一旦行动，你将脱离理智的大脑的控制，而进入求生的本能部分。血液流向四肢，你此时只有选择战斗或者逃跑。这就是我们演讲时头脑一片空白的原因。 如何摆脱杏仁体的控制这时唯一能够令你放松的方法，是把演讲当做派发礼物的过程。演讲的大忌是“恐惧和乏味”，但人类沟通的一项神秘法则是：当你给与的时候，你会变得更有趣，恐惧感也就消失了。这未必需要你有多么高的学术水平，哪怕你就是说一句谢谢，如果有派发礼物的心态，也会说的更有趣些。 为什么要学习高效演讲我们无法摆脱杏仁体的绑架，所以我们总是想如何才能度过这段难熬的演讲时间，发现了吗？我们过度关注自我了。事实上，演讲时的主角是观众，你是来给大家送礼物的，没太多人真的关注你，除非你能带给他们价值。低效率的演讲不仅仅发生在舞台上，每一个会议，每一次和员工面谈，和孩子面谈，向老板申请假期，甚至回复一封棘手的电子邮件，低效率的沟通妨碍了我们有效的交流，甚至造成误会和争执。大多数人每天将75-90%的时间用于沟通，但我们几乎从来没有受过专业训练。 高效沟通的三件事情演讲内容，演讲风格，演讲状态是高效沟通中最重要的三件事情。个人认为演讲内容是最重要的，风格、状态都是80分以上的部分，只要有好的内容，听众就能听下去并且记住你 。我们以往教授演讲的误区就在于过度关注风格和状态，而忽略或者说不会教内容的准备。 演讲内容：如何精心准备演讲内容一、确定你想要的结果，你想通过演讲获得什么？例如：谈话结束时董事会愿意批准我们开展下一步工作；演讲结束时学生们愿意到我们公司工作；谈话结束时我儿子愿意告诉我他为什么不喜欢学习……总之，越具体越好。没有目的的演讲就是浪费你和大家的时间，如果的确没有目的，那就随便讲吧，反正没人在乎。 二、为达到谈话目的，你需要让他们知道些什么？例如：董事会需要知道目前的研究进展；需要知道竞争对手的研究进展和投入；需要知道我们将如何另预算更加有效的使用。孩子将知道爸爸和他谈话是为了帮助他；学习问题会影响到他未来的更多选择；爸爸并不是只看重学习，更看重他自我约束的能力。（发现了吗，我们的很多演讲在开始之前都没有做过充分的准备，一边讲一边考虑要怎么说服对方，往往效果不好，事先想好三个一定要说清楚的事情，非常重要！） 三、为了达到谈话成果，他们需要感觉到什么？人们是在感性的时候才会采取行动的，所以在准备时你就要想好，你希望对方在听完演讲后有什么感觉：兴奋，激动，受启发，乐观，谨慎，痛苦，下定决心，感动，信任。这都是不错的感受，这些感受决定着你的演讲风格和措辞。 四、找到关联性：听众为什么要关注我？例如：如果不了解领导力，他们的工作会继续困难，得不到幸福的生活。如果不批准预算，我们公司将面临人才不足的严重问题。（这部分是最值得思考的，很多人讲话喜欢一开始做自我介绍，然后讲一大堆自己如何如何的废话，这与观众毫无关系。演讲的开始一定是从关联性切入，多用你，不用我。） 巧设结构：坡道-发现-甜点坡道——发现——甜点无论奥巴马、乔布斯还是马云、李连杰，所有好的演讲都是由三个部分构成的：坡道——发现——甜点。坡道是从关联性构造的，用“观众为什么应该知道”做为坡道，会很容易引起全场的兴趣，有时候坡道已经决定了你的成败。发现是演讲的主体，把你准备好的三个要点逐一讲清楚，视时间长短来决定详略。甜点是演讲的收尾，千万不要在问答环节结束演讲，一定要最后自己收尾。这是你把感性发挥到最大的时候，用一个故事，一首诗，一句名言都可以作为很好的甜点。 坡道：巧妙开场，引起听众最大的兴趣 第一种开场“女士们先生们上午好！非常欢迎大家来到今天的会场，作为会议的主讲嘉宾，我非常荣幸。在过去十年间，我在人力资源领域进行了大量研究，希望今天的演讲能给大家带来信息和帮助。我准备了三十分钟演讲，还有十分钟提问时间，期间如果您想上厕所可以出门右转……”第二种开场“在座的各位都在人力资源领域工作了多年，我们都被一个共同的问题困扰了多年，也就是究竟怎样才能真正有效的激发我们的员工？除了涨工资之外，到底还有没有别的有效激励方法？为什么很多优秀的公司能够做到让员工充满斗志？……”很明显，第一个开场是失败的，但很不幸，这正是我们大家常用的开场方式：讲一大堆和听众毫无关系的客套话，或者讲演讲的由来，自己的经历……要知道这些都和听众无关！第二个开场是一个常见的坡道，它来自于准备过程中对于听众关联性的分析，用问题做坡道可以很容易的抓住听众的注意力。 几个重要的原则1、讲话中用一次“我”就要用十次“你”。2、七秒法则：你只有七秒钟去争取听众的注意力，所以第一句话就要和听众有关系。3、开头慎用笑话，因为大家可能不笑。4、不要把精彩的东西放在最后，开头最重要。 常见的坡道 以“你们”开头，说出听众的心声 运用强大的有震撼力的数字 提出问题。“你们当中有多少人花了人生近一半的时间开会？”“有没有人知道现在北极熊的数量？” 令观众震撼。“我们正面临一次前所未有的挑战……” 坦白。“我一直害怕公众演讲，所以我更加努力去学习……” 运用“想象”这个词。“想象一下未来10年各位的购物习惯……” 讲述历史轶事。 讲故事。“今天早上我出门的时候，我儿子问我……”（怎么样，看到这里对自己的演讲是不是更有信心了呢？） 路线图——带听众了解演讲流程1）告诉人们你的演讲有多长。2）让听众预览你的议程安排。3）设定互动规则。4）当然，如果演讲很短，就抓紧时间开始讲你的“发现”部分吧。 发现——你需要对方知道的三件事无论你需要讲多少事情，都请你把它归纳为三点。因为人的大脑，只能有效的对付三件事。还记得你准备的三件需要对方知道的事情吗？在这部分逐一地清晰具体的讲出来。比如对一个青春期的孩子：“醉酒驾车有什么危害”“你对他的期望是什么”“你允许他开车的承诺和条件又是什么？”。 甜点——完美收尾，让听众记住你的演讲甜点部分不再给观众任何新的信息和观点、数据，因为这时候大家已经准备结束了。这时候要给他们的是完全感性的东西，记住，人们在感性时才会行动。最好的甜点是一则故事、轶事、一个比喻或想象、名人名言和坡道呼应的故事等等。试试看，5分钟，你就可以构造一个婚礼讲话，而且保证言之有物，精彩！总结一个演讲是这样的：坡道→路线图→三个发现要点→问答环节→甜点 练习运用一个婚礼演讲听众新人和亲朋好友他们为什么要关注结婚就是为了能幸福，你作为过来人有很多关于幸福婚姻的经验和教训。你希望他们感受到大家的真诚祝福、对父母家人的感激之情。你希望他们听完之后知道1、大家都很爱他们2、婚姻需要更多爱来维系3、对双方父母都要孝顺。 婚礼演讲框架坡道我今天出门时我儿子问我“爸爸，什么是结婚？” 我告诉他“结婚就是两个人决定幸福的生活在一起。”他又问我：“结婚就能幸福吗？”我得承认，这个问题难住了我……发现我做了一下功课，百度了一下结婚怎么才能幸福，发现了三个关键：第一，第二，第三……甜点现在我儿子就坐在台下，你们的婚礼是他第一次看到的婚礼，我相信，是他眼中最幸福的婚礼，祝愿你们成为孩子们幸福的楷模，我们真诚的祝愿你们！ 练习题利用准备表格，认真准备以下题目：-和儿子谈话，让他减少上网打游戏的时间-对员工演讲，让我们一起提高工作积极性-和配偶谈话，咱俩以后别吵架了坡道在座的各位都是管理层的领导，有的管着一个部门，有的管着一个车间。大家想象一下这样一个画面，你进到你负责的办公场地，看到你手下的员工，一个个都在玩着手机、聊着天，手头的工作想起来一下做一下，这时的你会是个什么样的感受？会不会你也变的很烦躁，感觉负责项目的目标离自己越来越远。。。发现我自己想象了一下，和大家是相同的感受，为了不让这一幕发生，为了让员工能够提高工作积极性，我去阅读了相关的书籍，得到了以下三个行之有效的方法甜点好了，看着各位积极的记着笔记，新的画面已经浮现了在我眼前，办公室里车间里，大家伙都积极的、热火朝天的干着工作，我自己仿佛也充满了满满的斗志，更积极的面对被赋予的工作。希望这样的画面，也能出现在大家的脑海中，并最终化为现实。。。 结语除了以上内容部分外，本书中还涉及了演讲的风格（声音、姿势、动作、表情和眼神）演讲状态（身体模式、心灵之眼、转变信念）以及如何在高危状态下演讲。我认为这些东西通过看书是很难改变的，所以并不实用。如果有兴趣，可以参看原书。本书的重点就是前面讲到的部分，内容打造扎实了，风格和状态才会变得不一样，声音、姿势从来就不是最重要的。想想看，霍金演讲依然获得大量好评。最后，我的建议是，这一切工具都是为了让你更真诚的沟通，而不是用工具替代了真诚。","tags":[{"name":"自我管理","slug":"自我管理","permalink":"https://peapon.github.io/tags/自我管理/"}]},{"title":"Mac OSX程序破解入门","date":"2018-07-03T16:55:22.000Z","path":"2018/07/04/Mac-OSX程序破解入门/","text":"原文链接在这里原文链接 本软件破解学习教程,仅用于学习软件原理知识,还请各位童鞋(尤其是软件开发的童鞋)养成知识产权的保护意识,拒绝盗版,尊重他人.本篇通过手动创建一个Mac osx应用,然后进行破解学习,一步一步分析,到最后完成破解目标,通篇没有高深的理论术语,因此仅用来作为初步学习的一个引子,供各位童鞋或爱好者在软件运行原理的学习中提供一个微薄的参考而已... 学前准备: Mac OSX下的反汇编工具: Hopper Disassembler (本示例使用v4.0.8) 基本的汇编指令(比如mov ,xor ,jmp,je 等) 没有其他啦,马上开始动手吧 先手动创建一个简单的Mac OSX应用关于如何具体创建简单的Mac OSX 应用,请移步我之前翻译的三篇系列入门一步一步,开始上手Mac开发 或者可以从这里下载示例中的应用demo工程:github.com/Alexiuce/Tip-for-day/tree/master/CrackDemo 我们创建的这个简单应用,是模仿注册码验证的一个逻辑判断(其实你也可以把这个当作是登录验证,道理是相同的),如果用户输入1234,我们认为是正确的结果,显示验证通过,否则都会显示验证码错误这样的提示信息 应用的界面大致如下图: 示例界面从Xcode工程中提取应用运行工程后,会在Products中,生成一个 “项目名称.app”的应用,这个就是我们的目标应用,然后在finder中找到它,并拷贝到桌面备用(我们后续的破解都是针对这个来进行的~) 提取项目工程中的应用程序先来运行一下破解前的程序,它的样子差不多跟下面图片相似 破解前的运行情况 开启破解之旅打开Hopper DisassemblerHopper Disassembler工具的默认启动界面 将需要破解的应用(就是demo.app)拖入到Hopper中拖入我们的demo.app到Hopper中确认选择界面 确认加载后的界面,入下图 加载后的界面这个界面的布局和Xcode非常相似,大家不要被一些看不懂的内容界面和工具栏迷惑而感到微微的手足无措(笔者第一次看到这个界面,也是茫然的~),我们下面把基本上常用的会一一介绍,其他的的功能按钮,先当作不存在(催眠式提升信心法~~),好,我们先来看一下工具栏下面的左侧Labels窗口: Labels窗口这个Labels窗口中列出的是应用被反编译后可以识别出来Objective-c方法,看到这些熟悉的方法名,小伙伴们是不是一下子感觉又回到Xcode代码中啦,让我们先忘记掉我们之前写过的工程代码,从这个列表里,我们根据方面名称,大致可以推断(破解的一个要素就是要有根据的猜测)出这几个方法的用途: [ViewController viewDidLoad] ====&gt; 视图生命周期方法,加载视图的时候调用 [ViewController checkCode:] ====&gt; 从名字可以看着,这个方法是用来做验证检查的(后面会进一步分析) [ViewController textField] : ====&gt; get方法,获取文本输入控件 [ViewController setTextField: ] ====&gt; set方法,设置文本输入控件 [ViewController tintLable] ==== &gt; get方法,获取提示文本控件 [ViewController setTintLabel:] ====&gt; set方法,设置提示文本控件 查看checkCode:方法我们根据方法名列表,最值得怀疑的就是checkCode:(就像如果破解一个软件的vip身份,那么如果看到isVip就应该给予特别注意一样)查看checkCode:的逻辑(右侧显示的部分很重要)从这个图里的右侧流程部分,我们可以看出checkCode这个方法的执行逻辑是这样的: checkCode方法入口—&gt; 执行一些代码(我们先不管这些代码在做什么)—&gt;选择两个分支代码段中的一个执行—&gt; 再执行一些代码后,checkCode方法结束checkCode:方法的逻辑流程图 假设阶段查看汇编代码这三行汇编代码是: mov al,byte [rbp+var_29] ====&gt; 这句汇编的含义相当于我们使用高级语言里的赋值语句,例如 al = 123(这里是为了理解写al = 123来举例,程序运行真实的al值并不是123),我们先把al当作一个变量来看,不去想al寄存器的事情 cmp al,0x0 ====&gt; 这个汇编的含义是进行两个值的比较 ,我们可以把它想象成一个高级语言的比较函数,后面是两个参数,例如cmp(a,b), 执行后返回比较的结果,汇编执行比较,其实是做减法运算,因此两个数相减会有三种情况,分别是大于零,等于零,小于零,这三种结果,有可以简单分为两个:相等,或不相等 je loc_10001054 ====&gt; 这个汇编的含义,我们可以认为是 相等(equality), 不相等是jne, 在汇编中,一般cmp后面都会根上类似的判断跳转语句. 因此这行代码下面会有两个分支(参考方法的流程图),如果cmp的比较结果是相等,就执行 loc_10001054 这个分支,否则就执行另外的那个分支(方法流程图中红色线条指向的那个分支)从这个代码逻辑,我们可以简单的猜测出来应用里判断验证码的逻辑是这样的: if (输入的内容 == 验证码) {显示正确结果(分支1)}else{显示错误结果分支2)} 求证阶段现在我们面临的问题是,哪个分支才是正确结果的那个部分呢?我们不必去读懂两个分支的汇编代码(如果你有兴趣另说),只需要修改逻辑并根据执行结果来验证就好了,比如,我们去除掉je loc_10001054 这个相等就执行的汇编代码,这样,checkCode的执行逻辑就被我们修改为没有分支loc_10001054的直线流程了.好,先动手试试 切换工具栏按钮替换掉je loc_10001054这条汇编指令(就是去掉条件判断,不管比较结果如何,都会执行固定的分支) 替换空指令替换后的结果保存修改后的结果,生成新的可执行文件 保存修改结果,生成新的可执行文件保存的路径一定不能与demo.app相同! 保存的路径一定不能与demo.app相同!! 保存的路径一定不能与demo.app相同!!! 保存新的可执行文件使用新的可执行文件,替换掉破解前的可执行文件: 在demo.app上点击右键,显示包内容用破解的文件替换原来的替换后示例运行破解后的demo.app 破解的运行结果 小结与讨论到这里我们貌似已经完成了破解工作,但其实是有很大的运气成分(我们只选了一个分支就碰巧是验证通过的那个代码分支),大家可以考虑如果我们这个分支是无论怎么输入都是显示错误的那个分支,应该怎么办呢?其实很简单,就是把je换成jne就可以了,有兴趣的可是试试,我这里就不再详细描述了(点选Modify菜单-&gt;Assemble Instruction 可以手动输入新的汇编指令,把je 替换成jne就可以哦) 最后,给有兴趣的童鞋留个疑问,如果找到原来正确的验证码呢? 大家自己动手看看吧 作者：代码行者链接：https://www.jianshu.com/p/33e40af6e328來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"XMind 8u2 和谐过程","date":"2018-07-03T15:33:10.000Z","path":"2018/07/03/XMind-8u2-和谐过程/","text":"Briefing Notes:This is a MultiOS RCE adaptation of the deconstructed XMind 8 Pro Update 1 v3.7.1 RCE, by Team appnee, for the Windows edition of XMind, which was based on the XMind 3.5.0 RCE serial from CodeCracker @ Team SND. Team appnee’s RCE strategy is novel, and elegant, and whilst developed specifically for 3.7.1 on Windows, when generalised, continues to work successfully for 3.7.2, on all desktop operating systems, and may also provide an RCE strategy for later revisions of XMind. The patch from that Windows edition RCE created a Java container file and also replaced the XMind initialisation text-file to then reference that Java container file. The RCE solutions for XMind, are historically, principally, modified Java container files, and usually, as a consequence, they are Operating System (O/S) agnostic. Props and thanks to CodeCracker @ Team SND for the original serial! Props and thanks to Team appnee for the current RCE! Props and thanks to ph03n1x for the GNU/Linux, and MacOSX, technical instructions! RCE instructions to install &amp; activate XMind Pro on Mac OS X:What you will need to know how to do: Use a file manager application Establish a Terminal window, with a command shell prompt Change directory location at the command line and in the file manager GUI (graphical user interface) Edit a plain-text file with a text-editor application These are all basic, foundation, computer literacy skills, for any operating system; the search engine is your friend. Install XMind and then run it once to disable any callbacks (Check for any Updates, or Data Sharing, options in the Preferences, and disable them all). Once completed, quit XMind. [Refer to the graphic: ‘/Graphics/XMind-MacOSX-RCE-Activation-Snapshot-1.png’] Modify the ‘XMind.ini’ file, found in the following location: /Applications/XMind.app/Contents/Eclipss Using a text-editor and add the following line to the very end of the file: -javaagent:../RCE/XMindCrack.jar Create the ‘RCE’ sub-folder, (rememering that the “Case” of ‘RCE’ is important), inside the following location: /Applications/XMind.app/Contents Resulting in: /Applications/XMind.app/Contents/RCE [Refer to the graphic: ‘/Graphics/XMind-MacOSX-RCE-Activation-Snapshot-2.png’] Copy and paste the file ‘XMindCrack.jar’ into that newly created ‘RCE’ sub-folder. Open the MacOSX HOSTS file by running the following command, at the command shell prompt, in a Terminal Window, providing your user password when prompted: sudo nano /private/etc/hosts Then add the following two entries to the HOSTS file and then save it: 127.0.0.1 xmind.net127.0.0.1 www.xmind.net Run the following command in a Terminal Window, at the command shell prompt, after saving the HOSTS file: dscacheutil -flushcache Now run XMind again. Open the Preferences, click onto ‘XMind Pro’ and then onto ‘Upgrade’. Click on ‘Enter Key’ and then register using the provided serial. XMind should then be successfully activated. [Refer to the graphic: ‘/Graphics/XMind-MacOSX-RCE-Activation-Snapshot-3.png’] Credits:Props and thanks to CodeCracker @ Team SND for the original serial! Props and thanks to Team appnee for the current RCE! Props and thanks to ph03n1x for the GNU/Linux, and MacOSX, technical instructions! See also:Introduction to the Mac OS X Command Line: http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line How to Open a Terminal Window in Mac: http://www.wikihow.com/Open-a-Terminal-Window-in-Mac Using the sudo command in Terminal: https://support.apple.com/en-us/HT202035 How to modify the HOSTS file, on Windows, MacOSX, and GNU/Linux: https://support.rackspace.com/how-to/modify-your-hosts-file/ [EOF]","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"需求交付质量讨论","date":"2018-07-03T15:32:41.000Z","path":"2018/07/03/需求交付质量讨论/","text":"","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"【转载】自我管理的开端","date":"2018-02-21T16:29:25.000Z","path":"2018/02/22/【转载】自我管理的开端/","text":"在知乎上搜GTD时发现的一篇回答，觉得很有深度，转过来看看，原文信息如下 作者：小布吕链接：https://www.zhihu.com/question/23051794/answer/150177755来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 从自我认识开始，GTD仅仅是自我管理的一个小分支，GTD的理论和技术就算你全盘理解几乎所有人也没办法实际使用的，你以为颠覆性的行为改变就那么容易？我毕业的学校有“知行合一”的校训，原来不以为然，偶尔开始了解王阳明的体系开始深觉总要，知道对这4个字缓慢认识并开始实践是过了多少年吗？你认为我就明白了这四个字？我这看了这4个字10年的人都这样，你确定你明白了？你确定这4个字就是你理解的意思？你确定这4个字对你有效果？ 什么是真正的GTD，就是你在GTD的时候你都不感觉你自己在GTD。听我的，解决生活问题GTD不是万能钥匙，重要在于自我认识的提升。我总建议身边人读书，有的人已经读了很多书我还在建议他读，为什么，同一本书你过一年读起来感受完全不一样，因为你人的格局和境界都在发生变化，以前觉得需要依赖外部系统和外部压力来做的事情，你现在觉得理所应当并且非常快速的就能处理掉，这段我想说，GTD对于烦乱日程和任务管理有效，对于你人生提升无效。 我这里抛出来一些我对自我管理的认识和理解，它包含了自我管理的形而上的道和形而下的技术，供后来人借鉴： 1 .你需不需要日程和任务系统管理很多人是不需要繁复的日程和任务系统管理管理的，他的认知和他的目标相匹配，任务系统没有压力迫使，随便一个小笔记本完全胜任生活中的信息和代办事项。他们就喜欢体验这种随波逐流的随意，这也是一种人生体验。从深层次来说人们做事情都有代价和收益，这些人来执行一个日程和任务体系，他们的投入大于产出（随波逐流，随遇而安，你让我每天记录要做的事情，分析分解，还要定期回顾？） 什么样的人需要日程和任务系统管理？简单一个原则，你使用上述系统的收益要大于应用成本，这种收益可以是时间收益，也可以是体验收益，市面热炒的“自律给我自由”，自律并没有给他自由，是自律过程中所获得的知识积累，体重减轻，自我感受改变等一系列变化才给了人自由。高声呼喊自律给我自由的人，是已经对成本和收益进行了评价：自律收益大于自律成本。 2.自我管理默认的几个人本原则自我管理本质是对自己人本的管理，你管理过程违反了为人的客观规律，会无法开展自我管理相关实践，下面列举了相关的自我管理的人本限制（原则）： 精力是任务和日程的燃料意志的动用会消耗精力值。复杂性工作需高精力进行 ，人在筋疲力尽的时候来从事创造性和探索性的活动。在面对复杂问题时的处理过程也建议在精力充足的时候。所以安排事情的时候建议要结合所安排事情的复杂难易程度来确定时间段（结合前后的精力水平），或者特为复杂或者重要的问题进行单独的精力准备。动用意志去克服欲望的时候，你的精力值也在克服中被消耗。精力和体质和体能的训练有着直接联系，增加精力最有效的方式就是体质训练和良好休息。 颠覆性改变必须借助外部压力和环境自我管理的进行对于绝大部分人来说，不可能是颠覆性的。颠覆性的是什么意思，举个简单例子，以往比如凌晨睡觉，早上快上班了才爬起来，遇到麻烦的事情一般喜欢拖几天，屋子几天才收拾一下，体育运动总是间隔的有时候会忘记，想练出一身肌肉，体重减下来，很多想法停在脑子里，偶尔发呆，放在桌子上的CPA资料只看了一点。以上的众多问题，不可能突然一天醒来就大变样，然后一切按新运行的。一般人的颠覆性变化，是要以来外部压力和环境的。比如进入部队去当兵，整个的作息和反应模式都会大变化。比如入住学校准备高考，你的作息和工作被要求保持一致。这些外部压力和环境的变化对于一般人来说是无法获得的，所以正常成年人的颠覆性变化很少发生，如果发生一般伴随着较大的内部或者外部压力。 认识到这点怎么办？给各位两个小砖头，可以自己引玉： 如果你要追求什么，成就什么，期望颠覆性变化的时候，将自己放入一个具有外部压力和环境的氛围中，在此间进行改变。比如准备某个考试就认真报个班，和老师同学多多互动，认真跟从班级内老师的要求。想跨行业就先光着身体蹦进去，你准备学习这个那个几年都没多大用。 认识到正常人颠覆性变化是不靠谱或者不持续的，所以把个人的纠偏目标放在一些小事和小习惯上，这是自我管理的初阶非量化性的方式。而对大多数人来说，这是最靠谱最有实践意义也最简单的自我管理方式。 ‘懒’或行动力不足多因未描述清事件的轮廓和目的，多为心理上而非行动上。 人们在任务执行过程中的畏难情绪，其实畏的是不明朗的工作任务，如果一个任务不具备可执行性，那么它的执行就会对它的责任人造成或多或少的压力。如果类似的任务一旦积压过多，就会变成难上加难，让人无从下手。 解决这个问题的核心是要把不可执行的问题变为可执行的任务。这里定义一个词语为“”执行梯度”，对于单个人来说，只有在一定梯度下的分解任务才在心理上具有可执行性，所以任务的分解工作主要是将大项目标分解为众多小于这个执行梯度的小任务，这其中涉及明确目标，分解目标，分解行动，制定可行计划等工作。 完美和美，这个是众多拖延症分析的矛头，这里不展开谈了，完美主义要不要也是分人分事，我的建议就是，对于大多数人来说， 小努力、小改善、小幸福足以。 3.自我管理的一些高阶实践量化的意义（高阶自我管理）：量化会导致维护成本显著提升，你要对自己进行材料采集和整理，在量化后很好做自我管理的方向设定，这一般是高阶的自我管理的实践，不仅依托于GTD系统，还要针对性的制作表格数据进行跟踪。 遵从内心所求（源动力源动机已经存在，分析已潜在运行，无需从起点出发），不自欺（感慨一下，这三个字有几个人能做到）。做喜欢的事情自带鸡血。 遇事客观，认可成就，同时确认损失。理智才能采取正确行动。一无所有的时候容易情绪用事，有了一大家子家业后多从利益出发，持恒产-无恒产者无恒心。 以三观处事，这样简单的培养塑造三观即可，不因人因事自我颠覆。 复杂项目执行渐进明细，复杂问题无法一开始就计划的很明确，渐进明细进行筹划，你能做到上一条以三观处事，那么渐进明细时抉择符合价值观就可。 个人时间的重要性（在没有监视完全自我的一个时间段）老生常谈，不展开。 责任催人前行，不展开。有用的实践，而不是正确的堆砌。自我管理的目的进行自我管理不是为了获得怎样的成就和目的，而是要去达到什么样的状态，而是要成为一个什么样的人。简单说，自我的管和不管就在一瞬间，简而言之，状态有就是大治。 结语：自我管理的范畴还很多，多读英文资料，少上国内的什么培训班，少交智商税，常用的四象限，番茄钟，敏捷管理（居然被国内某些机构演化成三个青蛙！！青蛙同意吗），驾驶舱，晨间日记，冥想自己翻翻教程，结合自己来实践。还是那句老话，自我管理的根本在于认知突破！","tags":[{"name":"自我管理","slug":"自我管理","permalink":"https://peapon.github.io/tags/自我管理/"}]},{"title":"用户画像","date":"2018-01-23T16:10:10.000Z","path":"2018/01/24/用户画像/","text":"这是一篇知乎问答，原贴在这里。我觉得蛮有用，转过来以备后用。 作者：知乎用户链接：https://www.zhihu.com/question/19853605/answer/51552384来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 什么是用户画像Alan Cooper （交互设计之父）最早提出了 persona 的概念:“Personas are a concrete representation of target users.”Persona 是真实用户的虚拟代表,是建立在一系列真实数据(Marketing data,Usability data)之上的目标用户模型。通过用户调研去了解用户,根据他们的目标、行为和观点的差异,将他们区分为不同的类型,然后每种类型中抽取出典型特征,赋予名字、照片、一些人口统计学要素、场景等描述,就形成了一个人物原型(personas)。 一些大公司还是很喜欢用personas做用研的，比如微软，腾讯blabla… 为何要建立用户画像personas?Cooper认为建立 Personas 的好处有Creates a common language Users are no longer elastic Provides a target - no longer designing for everyone in the worldEnd debates about prioritization and implementation简而言之，用户画像（persona ）为了让团队成员在产品设计的过程中能够抛开个人喜好，将焦点关注在目标用户的动机和行为上进行产品设计。 因为，产品经理为具体的人物做产品设计要远远优于为脑中虚构的东西做设计，也更来得容易。但 是特别注意的是:1、 用户画像要建立在真实的数据之上2、 当有多个用户画像的时候,需要考虑用户画像的优先级,通常建议不能为超过三个以上的 persona 设计产品,这样容易产生需求冲突。3、 用户画像是处在不断修正中的 Persona 一般需要具备哪些元素?姓名 Name照片 Photo年龄Age家庭状况 Personal details / family life收入 Income/Salary工作 Work / job details用户场景/活动 Activities / use scenario计算机技能/知识 Knowledge / skills / abilities目标/动机 Goals / motives / concerns喜好 Likes / dislikes人生态度 Quotes 注意:对于手机浏览器的用户而言,使用手机浏览器的习惯和用户的生活方式(尤其是喜好、阶级)息息相关。 举几个栗子：当年微软为office做的人物画像（包括了用户的主要活动、使用环境、使用工具等等等…）：这样的人物可以是多个的：甚至具体到人物的日常作息：使用设备： 既然写到了这里，再顺便说一下 如何建立用户画像personas?建立 personas 可以分为以下几个步骤(参考):Step1: 研究准备与数据收集Step2: 亲和图Step3: 人物原型框架Step4: 优先级排序Step5: 完善人物原型 参考阅读:CDC《创建定性用户画像》创建定性用户画像 (写的很具体~~推荐指数五颗星) 参考阅读:Personas Personas | Usability.govCDC《创建定性用户画像》创建定性用户画像亲和图 KJ 法在用研中的应用 KJ法在用户研究中的应用移动用户分类参考 Mobile Usage Segmentation System","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求确认","date":"2018-01-08T22:58:27.000Z","path":"2018/01/09/需求确认/","text":"为什么需要需求确认先从这幅图看起，这不是心血来潮弄出来的，这是一个研究给出的结论（Kelly，Sherief and Hops 1992），我只给出了10倍代价的图，这个研究给出的结论是在需求阶段修复错误往往只要30分钟，而在测试过程中修正错误往往需要5~17个小时。换句话说，就是在需求阶段修正错误是值得的，也是必须的。因此发现需求中的错误成了至关重要的活动，这些错误包括不符合用户的需要、没有正确的描述、需求冲突等等，我们把这个过程叫需求确认。我们要讨论的内容就是需求确认的目的，何时开始需求确认，怎么做。 需求确认目的这个问题很难回答，也很好回答，我们上面已经说过了，需求阶段修正错误可以付出很小的代价，也就是说能省钱。我更喜欢《软件需求》中关于这个目的的描述： 1234561. 软件需求能够准确地描述了预期的系统能力和特征，并且这些能力和特征能够满足不同干系人的需要。2. 从业务需求、系统需求、业务规则及其他来源中正确产线需求。3. 需求是完整的、可行的、可验证的。4. 所有需求都是必要的，并且整改需求集合满足业务目标。5. 所有需求彼此是一致的。6. 需求能够为后续的设计和构建提供充分的依据。 何时开始如果你问我什么时候开始做需求确认，我的答案是越早越好，当然，前提是你完成了需求捕获和初步的需求分析。 需求确认的过程首先我们要抛弃需求评审即是需求确认全部的思想，且需求确认也不是需求工作的终点。需求确认过程的活动应该是多个部分组成的，需求评审是必须的活动；原型可以根据需求的成熟度来决定是否采用原型，当然，也可以把原型理解为需求过程中的一种工具，可以随时使用；而需求测试是最有挑战的活动，很难去推动测试部门建立一种概念测试的观念，在没有实物前提下对需求测试对于很多测试工程师来讲，也是一个挑战。 需求评审需求评审是一个强大的工具，可以帮助需求作者及开发团队发现需求不明确或者不可验证、定义不清晰导致无法设计等问题，那么，需求规格或需求文档的作者这个时候就要摆正心态，想想评审的单词是“Review”，就是让别人给你看一遍的意思。评审的形式也多种多样，我们主要考虑非正式评审的需求走查和正式评审的需求审查 需求走查Walkthrough，这个单词的字面意思是演练、预演、过一遍的意思，所以这个活动的重心也就出来了，那么如何有效的开展走查是一个重要的问题。 这是别人的见解 12系统性的走查目的是为了评估一个软件产品。走查可能也会有让培训软件产品受众的目的。走查的作用还有交流技术、交流不同风格变化。 走查不仅可以发现异常，也可以指出不足之处（例如，软件产品的效率和可读性问题，设计或代码的模块化问题，或无法验证的规格）。参与走查有4个角色，分别是走查组长、记录者、作者、走查成员，走查至少需要2人。任何走查组成员的行政上级都不能参加走查。走查的最主要活动是作者或走查组长详细的展现所评审产物的每个部分，走查组识别并提出发现的异常和问题。走查的标准最少输出物总计有9项。走查不要求产物已经全部完成，可以按需高频开展。 在本五维需求评审框架中，走查属于有预审的双人即时或者会议形式、技术方面的定期或高频的同级需求文档评审。双人走查是标准允许的最少人数。双人走查与会议形式走查其实存在较大的差异：双人走查可以使用一台普通显示器，利用普通能够坐下两人的工作位置即可，这样就能够高频按需开展，会议形式往往需要会议室，而会议室在多数组织是稀缺资源，如果所有项目团队都开展需求和代码会议走查，那么每二周一次的会议室预订都未必能够保证，所以难以按需开展。代码走查是常听到的词汇，但是需求走查在中文世界很少提到，而在敏捷软件开发中已经显示了其有效性。 需求审查需求审查的单词是“inspection”，这个词也是有两部分，spection是检查的意思，加入前缀in，那么就是深入检查的意思，也就是审查啦。 需求原型需求测试需求确认中的常见误区需求验证形式化：许多时候是为了过流程，否则会阻塞开发，因此走一个正儿八经的流程，但实际上并没有达到效果；不重视：随便找个用户代表签字，责任为先，影响很不好；开会跑偏题：时常会开成批评会、吵架会、翻书会、语法纠错会。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"使用原型","date":"2018-01-08T21:45:01.000Z","path":"2018/01/09/使用原型/","text":"原型是一个强大的方法，他可以引入所有重要的客户关注点——《软件需求》第三版P264","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"Java 程序破解思路","date":"2018-01-03T13:37:43.000Z","path":"2018/01/03/Java-程序破解思路/","text":"本文提供的方法仅供学习用，不对结果负责。 总体思路 定位授权或加密类 分析加密/授权方法 修改Jar包文件 重新打包 这里提供一种提供试用版软件的破解方法。假设程序需要输入试用License文件才能试用。具体的方法步骤如下。 定位加密文件和类定位的方法是苦功夫，至少我是这么干的，打开你安装的程序的文件夹，找一找有点像的jar包名称，如active，license等，这个靠人品了，具体的软件有所不同。 工具用一个你熟悉的Java反编译器来反编译Java的class文件，我用jd-gui，官网在这里。运行JD后，把你要分析的jar包拖进去或者用文件打开，就能看到你要的“Java源代码”了 定位接下来就是苦功夫了，如果我们没有能够一下找到license授权管理所在的jar包，我们就要慢慢找了，可以把你认为有可能性的包都拖进来，用JD的search功能搜关键字，如license，找到后去慢慢分析，如果不是则可以换一个别的关键字试试。 分析加密/授权方法如果运气不错，你能碰到一个比较简单的授权方法，如通过密码，那我们就能够通过前一步骤中打开的Java类找到对应的解密方法，然后反推加密方法。对于支持试用类的软件，也比较好办，找到试用管理的函数或者类，我们自然也就找到了加密解密的方法了，这种时候可以通过编写一个keygen生成一个密码或文件。 修改Jar包文件我们谈谈修改Jar包里边的文件，这个也有很多种方法，我用的是javassist-3.15.0-GA,官网在这里，使用方法请参考这篇文章，我写的代码如下： 123456789101112package modifyclass; import java.io.IOException; import java.util.Arrays; import javassist.*; public class modifyclass &#123; public static void main(String[] args) throws NotFoundException, CannotCompileException, IOException, InstantiationException, IllegalAccessException &#123; ClassPool pool = ClassPool.getDefault(); CtClass cc = pool.get(&quot;com.test.license&quot;); CtMethod cm = cc.getDeclaredMethod(&quot;getPublicKey&quot;); cm.insertBefore(func); cc.writeFile(); &#125; private static String func = &quot;byte [] data = new byte[] &#123; 95, 63, 46, 79 &#125;; key_data = data;&quot; &#125; 这个程序运行后会在com/test文件夹下生成一个新的license.class文件，这个文件就是我们修改过得文件了。 重新打包文件用jar命令来重新打包 将原来的jar包解压出来，命令jar xvf license.jar 将前一步骤生成的class文件替换jar包解压出来的文件 使用jar命令重新打包，命令为jar cvf license.jar com/ META-INF/解释一下这条命令，license.jar是我们要打包的文件名称，后边的com/ META-INF/是要打包进去的文件或文件夹。 这样基本就完成了，剩下的事情就是用了。当然，如果是要写keygen的话，需要编写其他的代码。 其他有时候我们会碰到一些混淆的代码，难度对应会增加，但基本思路还是差不太多的。","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"如何定义性能需求","date":"2018-01-02T08:24:46.000Z","path":"2018/01/02/如何定义性能需求/","text":"本文来源于InfoQ，感谢原作者的贡献如何定义性能需求 JVM监控解决方案提供商Plumbr的官方博客上发表了一篇题为《如何定义性能需求》的文章。文章指出，随着企业信息化程度的提高，业务人员对软件功能性需求的描述越来越好。但涉及到易用性、兼容性或性能等非功能性需求的时候，他们经常会不得要领。比如，他们可能会提出“它的运行速度要快”这样的性能需求。在更好的情况下，他们可能会提出下面这样的性能需求： 在系统中执行的操作，95%的都必须在5秒针内响应； 系统必须支持100并发用户。 初看上去，这样的需求已经好了很多了。但实际上，它们甚至比只用一个“快”字描述更差。虽然它们包含了一些数字，看上去似乎可以作为开发人员的终极目标。但实际上，这两个需求最多只能为关于性能需求的讨论开一个头。 文章接下来对上述两个需求进行了剖析。 第一个需求没有提出针对其它5%的操作的性能需求。而且，不同的功能对性能的需求也不尽相同。比如，对于功能“显示当前账户余额”和“显示2013年所有的交易”，前者5秒响应可能都略显慢，而后者响应时间再长一些也可以接受。因此，性能需求描述应该： 针对不同的操作类型指定可接受的时间延迟； 将时间延迟相关的需求与负载/吞吐量相关的需求联系起来； 明确时间延迟的测量位置，比如，延迟时间是以客户端为标准，还是以服务器端发送出最后一个字节为标准； 哪些操作的时间延迟不太要紧。 第二个需求看上去很准确，实际上很笼统。比如，将“100个并发用户”理解成“100个线程处理100个并发操作”。如果每个操作用时1秒，那么系统吞吐量为100 ops/sec；但如果每个操作用时10秒，那么系统吞吐量则只有10 ops/sec。对于后一种情况，我们不能认为它满足“100个并发用户”的需求。因此，需求应该更清楚地描述特定用户的行为，而不是用“并发用户”这样的术语。当然，这里并不是说建议测量吞吐量，因为现实世界的应用程序往往是多功能的，很难使用吞吐量来衡量其性能。 本文还提到了容量规划，即在什么样的前提条件下实现上述性能需求，包括如下三个方面： 系统的数据量； 系统的基础设施限制，比如，CPU、内存等； 系统的部署环境，比如，网络带宽是多少，是否需要离线操作等。 总之，应该与业务人员紧密合作，制定出可测量的、具体的性能需求。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"简单的逻辑学阅读体会","date":"2017-12-07T23:55:30.000Z","path":"2017/12/08/简单的逻辑学阅读体会/","text":"","tags":[]},{"title":"软件需求编写指南","date":"2017-12-05T21:56:57.000Z","path":"2017/12/06/软件需求编写指南/","text":"软件需求规格的特性软件需求规格应该包含的范畴来源：IEEE830-1998(编写指南) 软件需求规格应该包含的范畴 功能性需求 外部接口 性能需求 属性 设计约束 软件需求规格编写总体注意事项来源：IEEE830-1998(编写指南)章节 4.2 应该定义所有的软件需求 不应该定义设计实现的细节 不应该对软件施加额外的限制，专注于软件需要做什么 来源：IEEE830-1998(编写指南)应当尽量避免在软件需求规格中编写设计想内容，应当明白，需求是设计的约束条件而不是设计本身。来源：IEEE830-1998(编写指南) 需求的描写应该是以业务为导向，而不要刻意去划分软件模块，这是软件设计应该做的事情 也不要将某一功能制定到某一功能模块 模块之间的信息或控制流 数据结构 通信协议，除非有特殊要求，否则不应该描述通信协议的具体要求 出现了这些设计相关的内容时，说明软件需求规格已经越俎代庖了，这时应该考虑的是软件需求细化过度。 来源：IEEE830-1998(编写指南)什么情况下应该将设计写入到需求？只有在某些特定的，对设计有特别要求的情况下，比如网络安全采用的加密方式、性能上的限制、开发标准约束、软件质量约束等。这种情况下，这些需求应该独立成单独的条目或章节。 好的软件需求规格特性来源：IEEE830-1998(编写指南)好的软件需求的特性是： 正确的，保证软件需求与上级需求是一致的，不冲突的； 无二义性的，软件需求应该是清晰的，明确的，没有歧义的，如果存在文字上的多义性，可以使用定义来加以说明； 完整的，不要漏掉任何需求或必要的信息，如果对于没有思考清楚或没有调研清楚的需求，可以在归档前使用TBD，但不要在任何归档的需求规格中使用TBD； 前后一致无冲突的，需求规格文档内部是一致的，不冲突的； 有优先级的，软件需求应该具有优先级，以便进行项目开发的管理； 可验证的，所有软件需求都应该是可以编写测试用例的，避免主管描述，如果测试工程师无法根据需求编写测试用例，也就无法进行验证的，说明需求分析不到位； 可修改的，需求需要降低内部的聚合性，也就是一个需求条目不应该聚合太多内容； 可跟踪的，需求应该具备可追踪性，最基本的方法是要保证需求都具有唯一的ID，同时要避免多个需求合并为一条需求描述。 细化程度需求规格应该细化到所包含的信息刚好够开发人员和测试人员正确实现的程度，不要因为信息过少而让开发人员和测试人员无所适从，也不应该出现不必要的内容和说明。 合适的细化“应该把需求细化到什么程度？”这个问题是没有一个简单而正确的答案的。需求细化的目标是让需求理解错误的风险最小化。因此需求编写的细化程度可以根据团队成熟度来决定，团队成熟度越高或有前例可循，则包含的细节可以少一些；如果团队成熟度相对较低，比如说新员工或出现跨地域团队等情形，需求中应该包含更多细节。当然细节的多少并不是说需求中能够缺少必要的需求规格要求，如范围等。 一致的粒度 同一篇软件需求规格中，相关联的需求尽量采用相同的粒度； 如果测试人员能够预见到需要大量的测试用例来测试一条需求或无法评估测试用例，则说明将多条需求描述到了一条需求中，应该分开。 XXX软件需求规格-模板引言编写目的本章节用来编写该文档编写的目的，及预期的读者，可以定义为如“本说明书用以阐明XXX软件系统的功能、性能、约束的要求，作为系统设计的输入。预期的读者为软件工程师、测试工程师”。 背景本节编写是软件的背景信息，不应该出现需求条目，需要包含 待开发软件系统的名称 待开发软件系统的功能，明确该软件系统的主要功能 与待开发软件系统交互的其他系统 定义这个章节定义项目中使用到的所有术语，包括同义词。这里的内容就是一个字典，包括在需求规格说明书中使用的所有名称的含义。这个字典应该使用你的组织或行业使用的标准名称。这些名称也应该反映出在工作领域中当前使用的术语。该字典包括项目中用到的所有名称。请仔细地选择名称，以避免传达不同的、不期望的含义。为每个名字写下简明扼要的定义，这些定义必须经过相应的风险承担者同意。 系统概述产品视图产品功能概述用户特点运行环境总体约束文档变更介绍风险分析接口需求用户界面硬件接口软件接口通信接口功能需求性能需求兼容性需求可靠性需求多语言需求其他专门要求附录","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"MagicApp说明","date":"2017-12-05T21:41:00.000Z","path":"2017/12/06/MagicApp说明/","text":"MagicApp是日常处理的程序，协助进行日常工作处理 批量重命名模块说明该模块是根据指定Excel中的指定三列，以某一列为条件查找第二列的文件名称，并在指定的文件夹中查找文件，文件夹中的文件名称格式为column1.colum2,找到文件后重命名为column3+column2。列可以在config.xml文件中设置： 12345678&lt;config&gt; &lt;Columns&gt;/Items/Item1;/Items/Item2;/Items/Item3&lt;/Columns&gt; &lt;Sheet&gt;Sheet1&lt;/Sheet&gt; &lt;FirstRowAsTitle&gt;1&lt;/FirstRowAsTitle&gt; &lt;Find&gt;/Items/Item1&lt;/Find&gt; &lt;Body&gt;/Items/Item2&lt;/Body&gt; &lt;Connection&gt;/Items/Item3&lt;/Connection&gt;&lt;/config&gt; 主要功能分解 选择文件夹 选择Excel文件 读取“序列号”列 读取“文件名称”列 读取“流程编号”列 合成column1.colum2文件名称 在文件夹中查找column1.colum2 重命名为column3+column2 按照类别提取Excel模块说明该功能类似Excel筛选功能，筛选完成后自动将同一类数据拷贝到一个单独的sheet页中。筛选的列允许用户自行设置，用户需要设置以下几项 12&lt;FilterColumn&gt;文件名称&lt;/FilterColumn&gt;&lt;FilterSheet&gt;Sheet1&lt;/FilterSheet&gt; 程序会根据选定的列去自动筛选并合并数据导单独的sheet中。 主要功能分解 选择文件（人机交互） 加载文件 获取指定列中的所有类别 在所有数据中查找某一类别的数据 创建新的表格 基于前一步创建新的sheet并写入，直至所有类别完成 要求所有类别的总数不能超过255 扩展设计由于表格文件的列可能存在不确定的顺序，因此要求可以根据后续需要指定列，因此使用了config.xml中的扩展。 开发环境 SharpDevelop 5.1 .NET 4.0 NPOI","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"网络诊断三部曲","date":"2017-11-01T14:03:40.000Z","path":"2017/11/01/网络诊断三部曲/","text":"查信号强度网络现场勘察和延迟分析 现场勘查，获取平面图； 获取网络类型，确定是零漫游、AP+AP还是AC+AP，这两点是基础信息获取； 在Windows命令行或终端中ping任意一台设备，延迟大于500ms时，表示网络基本不可用，小于200ms表示网络状况可以； 如果网络中存在干扰，ping包的延时特点是时间长短不一，而且差异明显，如可能会出现10+ms，有的会达到几百ms ping命令ping 192.168.1.x -t，使用该命令会持续不断的ping目标地址 具体的用法用量点这里。 遥测设备信号强度确定 在遥测设备 上进入到维护菜单（长按F键+开/关机键），三秒左右会出菜单 输入密码厂家维护密码 进入到网络设置菜单 查看RSSI值，如果没有值，表示WIFI没有连上 信号强度要在-65dBm及以上（注意是以上，比如-50dBm）才能比较稳定的连接 注意点： 一般来说在一个房间测试时，需要测试四个角、每个床位，正对和背对天线都需要测试 如果是AP+AP，AC+AP，如果AP都在走廊，需要确认一下墙体材质和厚度，一般来说 玻璃材质不档信号 砖体墙会衰减信号，根据厚度不一样而不一样 整块金属对信号的屏蔽能力很强 人体对信号的屏蔽明显，在10dBm左右，胖子不知道 查看信号，一定要在遥测设备上进行，手机和电脑上看到的信号强度不具有参考价值 查无线网络配置无线网络的配置有时会影响设备持续在线的能力，因此需要查看无线网络的配置，与设备支持的配置一致才能很好的兼容，初步需要注意下面两点： 802.11bgn中的三种制式，禁用n模式，保留bg混合模式或者只保留b或者只保留g模式 关闭路由器的WMM功能，设备不需要该服务，该服务会对数据包优先级排序，可能会影响网络 这个设置可能需要IT部门支持 具体的配置方法要参考相应型号的使用手册 查同频干扰/信道干扰无线网络的信道就是一种网络带宽资源，信道上的带宽是固定的，用的人多，就会出现僧多粥少的拥挤局面，因此要避免信道重叠或者邻频干扰，查看信道使用情况的工具有很多 Windows平台，推荐使用WirelessMon、Xirrus WiFi Inspector，简单好用，使用方法见。 Android平台，inssider软件和WiFi Overview 360都可以查看周围信号强度，都可以查看信道的使用情况，都能够简单上手。 iOS，没有 抓包调试有时需要使用wireshark来抓包官网地址，初级教程点这里。","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"敏捷软件需求管理","date":"2017-10-23T02:29:39.000Z","path":"2017/10/23/敏捷软件需求管理/","text":"严格的来讲，这个标题的说法并不是很严肃，这篇文章的目的不是建立一个敏捷软件需求管理的流程，而是去探索一种需求管理的实践，解决现在工作中遇到的困惑和困难。为了将问题解释的更清楚，我需要先从流程定义说起。 流程定义上面这个图是一个典型的IPD（集成产品开发）流程图，从大的视角来看，这就是一个典型的瀑布模型，需要有前一个阶段的成果作为后一阶段的输入，后一阶段的工作才能开展，这样当然没有错，不过有时候会显得低效和无法满足项目的需求。同样，我也拿出我们研发层的各阶段的定义，进而进一步探讨。 从图和表中点后可以看到，需求分析集中在项目的前期的阶段，理所当然，需求就要作为后续工作的输入，因此需求很重要，这都知道，所以在图中也设置了需求的技术评审，但需求的技术评审并不能保证全部的质量。 总结来说，需求很重要，但需求又大多数集中于前端部分，不好管控，怎么保证需求高质量的分析，发现和实现都是比较困难的事情。 需求层次产品开发规程中，对需求层次的定义是： 用户需求是顶层需求，直接反应用户的需要，要能反映出临床用户的需要，作为临床确认的依据； 产品需求是对用户需求的细化，除了要考虑用户的临床需要，临床场景，还需要考虑公司的业务目标，产品的竞争等因素，主要用于定义产品是什么样子； 子系统需求是对产品需求的细化，考虑技术因素，用什么样的技术等来满足产品需求，以达到产品需求的定义。 软件需求为什么重要我们公司大部分产品都是软件密集型产品。我们先来看看软件密集型产品的定义。 软件密集型定义： 所谓的系统就是客户要的东西，软件通常只是客户要的东西中其中的一部分，而不是全部，除了软件还有其他东西，比如客户要一个数控机床，除了软件之外还有机械部分，还有硬件部分。 软件密集型系统，应该是指系统中软件是主要部分，在开发软件的成本占系统成本的大部分。 产品的类型从定义来看，毫无疑问，拿监护仪来作为分析对象的话，我们的产品肯定是软件密集型产品无疑。因此无论是在产品的使用和产品的开发上，软件都占了很重要的一部分。 软件开发的工作量的评估软件行业中各工种所占比重或权重，有几种估算方法。 常规估计法： 软件各个生命阶段时间大致分布：计划阶段占2%~3%；需求分析占10%~25%;软件设计占20%~25%;编码占15%~20%；测试和调试占30%~40% 差别估计法： 差别估计法：总比重是53计划和需求：6产品设计：10详细设计：12编码单元设计：16集成和系统测试：9 IBM估算模型： IBM估算模型：（总比重10）软件计划：1需求分析：1.5设计：3.0编码：1.0测试：3.5 虽然这是对软件行业中需求的评估，但我们开发的系统是软件密集型系统，所以有一定的代表性。典型的项目中，需求的工作量需要占到10%~25%，就算我们采信IBM的估算模型，需求分析工作量也需要占到15%，但目前我们是不够的，当然，也不能说我们现在的投入不够15%我们就不去把需求做好，而是想办法做到尽可能的好。 可以看出，一个正经的软件产品开发流程，理性的去评估软件需求分析的工作量是很重要的，不仅影响到需求分析的产出，也影响到软件设计的输入。 典型软件生命周期模型简介传统的瀑布模型讲究的是每一个阶段性的工作成果，并把上一阶段的成果作为下一阶段的输入，这种模型的典型问题就是上一阶段的延迟和延期会导致下一阶段的延迟和延期，环环相扣，导致项目最终延期。 近年比较流行的迭代模型，摒弃了传统的需求分析，设计，编码，测试的流程，而是将整个生命周期变成若干个冲刺（Sprint）阶段，而每一个阶段都是由以上若干或者全部传统的流程组成，在每一个阶段中，都会包含下面四个阶段：初始阶段，细化阶段，构建阶段，交付阶段。 在初始阶段中，确认本次冲刺的范围，边界，系统选择的架构，计划，以及所需要的资源等信息。 在细化阶段中，对问题进行建域，创建开发案例，创建模板以及准备工具等。 在构建阶段的主要任务就是完成构建的开发并且进行测试，将完成的构建集成为产品，并且测试所有的功能（CI）。 在交付阶段，主要是完成本次冲刺，将软件产品交付给相关的干系人。 五种生命周期模型请参考 似水流年的博客 定义我们自己的流程流程框架和概述现阶段来说，影响我们软件需求交付质量的是把一件庞大的工作就是作为一件庞大的工作来做，而且要求一次性交付。这种一锤子买卖是影响到需求分析和设计人员交付的质量的，同时也影响需求评审人员对于需求的理解。要让一个评审人员在几个小时或几天内消化一个需要花一年以上或者几年的产品，有一定的困难，这种情况下，很难保证后续有人会改变主意，进而导致发生已经确定的需求的变更，应该说是在所难免的。 那么我们定义自己的流程，需要吸收迭代模型把大事“化小”（划小）的思维，将一个规模特别大的事情，划分成若干件规模可控的事情来进行。也就是把软件需求的工作打散，放到开发阶段去做去完成，这样来保证项目最后产品的交付时间。当然，打散并不意味这我们前期就不需要做需求分析了，我们先看看流程图。 流程操作指引根据产品开发规程的定义，各种角色一定要在各个阶段完成各阶段的内容和输出，应该理解，这样的定义从框架性的流程上来讲是没有问题的，是合理的，否则就不好把控了，同时这也符合医疗仪器开发本身流程的严肃性，满足FDA guidance中提出的Define，Document，Do的3D思维。 产品需求定义产品需求的输出要在项目前期进行输出，应该是毫无疑问的，产品需求决定这项目的范围，因此，让项目团队明白自己要开发一个什么样的产品，大的方向是什么，这是需求工程师的职责。尤其是我们开发的大多数产品都不仅仅只涉及到软件，还涉及到硬件、结构、工业设计、算法、附件等领域，因此让大家能够有一个工作的基础很重要。 产品需求定义中，需要定义出产品的定义、产品的配置、产品能够提供的服务、产品的功能性需求、产品的重要非功能性需求、产品的安全及环境要求、产品的整机外观等要求、产品需要使用到的附件要求、产品升级、保养维护等要求以及产品需要满足的法规和政策的要求，详细内容可以参考《XXX产品需求模板》的定义。 软件需求基线的定义 基线(Baseline)，基线是 软件文档或 源码(或其它产出物)的一个稳定版本,它是进一步开发的基础.所以,当基线形成后,项目负责SCM的人需要通知相关人员基线已经形成,并且哪儿可以找到这基线了的版本.这个过程可被认为内部的发布.至于对外的正式发布,更是应当从基线了的版本中发布. 软件需求基线是一个基础稳定版本的需求，我们这里提出的基线定义并不完完全全是跟严格意义的基线的定义一样，实际上我们这里定义的基线是软件项目范围的基线。对于这个版本的软件需求，要求是覆盖产品需求中应该分解到软件需求的所有内容，可以粗，不可漏，可以指导软件系统进行概要和系统设计，能够满足TR1阶段的要求。在表达方式上，可以将整体按照模块划分为多个文档（推荐），而这个基线文档的多个章节，对多个模块的主要功能做抽象，可以用用例图或功能树或列表的表达方式，可以参考我另外一篇文章需求建模和表达的技术。 软件需求基线评审在评审上，这篇需求应该是一个高层次的定义，应组织以下评审人员应该涵盖产品经理、产品线经理、需求技术经理、软件技术经理、项目经理、软件系统工程师、开发代表、测试代表、市场代表进行会议评审，在这个评审上，大家对软件系统的范围达成一致。在责任上，除了需求工程师的主体责任外，需求技术经理、软件技术经理及系统工程师应该对需求所表达的内容负责重要的审核责任，识别出技术风险和需求镀金。 提交TR阶段软件需求同时，该文档应该进行PLM的线上评审，并按照《评审审查表》的定义选取相应的角色进行线上的评审，并完成TR1的软件需求的受控和归档。 启动模块需求细化工作这实际上是第三阶段工作的总称，模块需求细化的前提是划分好了模块，我们在前一阶段需求基线化的时候，我们是需要做好这件事情的。当然，这件事情应由需求工程师来主导，软件系统工程师参与，立足于对系统功能的分解来完成，而不是系统的设计的模块化，因此这里讲的是需求模块化。如果说这个阶段发现需求模块化的程度是不够的，我们需要再进行这个工作，否则，后续的工作开展会比较困难。 安排轮次开发的需求内容在每一轮需求的实现，也就是敏捷模型里边说的冲刺的时候，所开发的需求的规模都应该是可控和可开发的。也就说，在每一轮开发中，需求应该被定义到可开发的程度，并被开发人员理解，能够被转化为设计语言，建议的执行方式是： 这个阶段的工作实际上是整个软件开发的关键，在这里，这个团队明确了本轮次的开发任务和冲刺目标，所以这个阶段对软件项目经理的要求是很高的，对各个岗位的工程师要求是团队要对完成目标达成共识。职责如下: 需求工程师：保证本轮次要开发的需求已经得到细化，并提交PLM同行技术评审，在轮次开的的第一周组织软件工程师进行需求的解读和分解，将需求传达下去； 软件工程师：在轮次开发的第一周参与需求的解读和分解，积极理解需求。设想需求设计和需求实现的方案，如果存在需求问题，及时发现； 测试工程师：在轮次开发的第一周参与需求的解读和分解，积极理解需求。设想测试的方案和测试用例的编写，如果存在需求问题，及时发现； 系统工程师：理解需求，考虑系统设计方案 软件项目经理：确保轮次的第一周的开发资源参与需求解读； 软件技术经理：审核软件需求，从技术的角度评估需求的可实现性等问题； 需求技术经理：审核软件需求，审核需求的完整性和合理性。 形式方面的建议，建议主要的需求工程师、软件工程师、测试工程师闭关进行需求的解读和分解，确保需求得到恰当的理解。 需求实现该阶段的任务由软件项目经理主导，该阶段中，需求工程师要保持与开发团队沟通，及时跟进落实情况，及时发现问题和进行修正。在该阶段中，需求工程师要进行下一阶段所需开发的需求进行细化，及时排除可能出现的障碍。 需求Demo和验收需求开发完成后，及时得到需求的确认和反馈，对于开发团队来说，是非常重要的，在这一阶段，也就是开发工作完成后，软件项目经理应该组织需求工程师、产品经理、整机项目经理、产品线经理、市场代表、需求技术经理、软件技术经理机型需求Demo，演示开发完成情况。这一阶段同时需求工程师要完成需求完整状态的检查，输出该轮次的需求状态表。 多语言字符串清单并评审在完成Demo后，软件项目经理需要将本轮次新增的字符串导出为指定格式的多语言字符串表交付需求工程师，需求工程师完成中文解释的添加，并提交PLM进行同行技术评审，字符串处理方法请参考《监护多语言字符串管理规范》。 总结应当理解，把需求能够落实到产品中，也是一项非常重要的工作，所以需求工程师在这里要主动积极的把需求传达下去，因此在需求传达的路径上，需求工程师要负主要责任。同样的，开发团队应该理解，我们一致的目标是把需求实现，达到产品的要求，以实现临床应用和企业的目标，开发团队在这里应该摒弃专业组的界限，为共同的目标服务。 软件需求是一个沟通的过程，我们尽量前期阐述明确，减少后期的沟通工作和变更。 op=>operation: 用户需求 op1=>operation: 产品需求 op2=>operation: 软件（子系统）需求 op(right)->op1(right)->op2{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);st=>start: 开始 e=>end: 结束 op=>operation: 1. 产品需求定义 op1=>operation: 2. 软件需求基线定义 op2=>operation: 2.1 软件需求基线评审 cond=>condition: 2.2 基线范围完整？ op3=>operation: 2.3 提交TR1阶段软件需求 op4=>operation: 3. 启动需求细化工作 cond1=>condition: 3.1 软件需求是否模块化 op5=>operation: 3.2 安排轮次开发内的需求内容 op6=>operation: 3.3 模块级需求细化 op7=>operation: 3.4 模块级需求评审 op8=>operation: 4. 需求实现 op9=>operation: 5. 需求Demo和验收 op10=>operation: 5.1 输出需求状态清单 op11=>operation: 6. 输出字符串清单并评审 st->op op->op1 op1->op2(right)->cond(no,left)->op1 cond(yes,right)->op3 op3->op4->cond1(no)->op4 cond1(yes)->op5 op5->op6 op6->op7 op7->op8 op8->op9 op9->op10 op10->op11 op11->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);op0=>operation: 需求定义（上一轮次计划本轮次开发的需求） op1=>operation: 召开轮次启动会（明确本轮次开发的内容，确定下一轮次开发内容） op2=>operation: 需求分解和解读 op0->op1->op2{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-2-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-2-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-2\", options);","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"使用GitHub Pages创建博客和图片上传问题解决","date":"2017-10-22T12:44:11.000Z","path":"2017/10/22/使用GitHub-Pages创建博客和图片上传问题解决/","text":"搭建博客博客的搭建过程完全参照小茗同学的博客园中的使用hexo+github搭建免费个人博客详细教程里边的详细介绍。请逐步跟文档进行操作。我只对一些要点做总结。 要点1 SSH Key的配置在电脑上使用git时，若SSH Key没有配置，在执行hexo d命令会提示Permision Denied,因此这一步要注意，请按照配置ssh-key中的说明。 要点2 Deploy设置在_config.yum配置时，这一点其实是最容易出现错误，正确的配置应该是1234deploy: type: git repository: git@github.com:yourid/liuxianan.github.io.git branch: master 一般大多数的介绍都是123type: githubrepository: https://github.com/yourid/liuxianan.github.io.gitbranch: master 更详细的内容，请参考上传到github 写博客工具工欲善其事必先利其器，好的工具能够大幅提升效率，这里要安利一下MWEB，官网在这里，各种好用，谁用谁知道。我们用他的External模式，我的设置方法是：View -&gt; Open External，看图，最后那个选项就是。 External模式打开后，我们用左下角的“+”把hexo博客目录下的source文件夹选进去就可以了。) 图片问题刚开始时被在博客里边贴图片的问题难到了，甚至有一刻有放弃的念头，后来在网上查到了MWeb同样可以解决这个问题，方法也很简单，承袭上一步，我们在选择source文件夹时，会弹出让你设置文件夹属性的对话框，进行如下设置即可12Media Folder Name: imagesMedia Save Path: Absolute 这样一来，就可以直接在MWeb中直接粘贴截图了，图片会被自动保存到images文件夹，而后，在运行hexo g的时候，图片文件夹也会被生成和上传到GitHub。 让Hexo支持流程图让Hexo支持Markdown的流程图是一个很酷的想法，所幸不是只有我想到这个问题，人家早已解决，所以我们只需要利用前人的轮子即可。 安装hexo插件命令为npm install --save hexo-filter-flowchart，插件地址， 配置：在hexo的_config.yml文件中配置 1234flowchart: # raphael: # optional, the source url of raphael.js # flowchart: # optional, the source url of flowchart.js options: # options used for `drawSVG` 示例代码如下（注意，在MWeb中要把这段设置成代码块才能生成流程图） flowst=&gt;start: Start|past:&gt;http://www.google.com[blank]e=&gt;end: End:&gt;http://www.google.comop1=&gt;operation: My Operation|pastop2=&gt;operation: Stuff|currentsub1=&gt;subroutine: My Subroutine|invalidcond=&gt;condition: Yesor No?|approved:&gt;http://www.google.comc2=&gt;condition: Good idea|rejectedio=&gt;inputoutput: catch something…|request st-&gt;op1(right)-&gt;condcond(yes, right)-&gt;c2cond(no)-&gt;sub1(left)-&gt;op1c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;e st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"Mac下驱动BCM20702A0 USB蓝牙","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/Mac下驱动BCM20702A0 USB蓝牙/","text":"偶然搞了一个USB蓝牙，查到Mac下能识别，无法驱动，就去找了一下。方法很简单，就是把蓝牙的PID和VID加入到驱动里边去，具体方法和步骤如下： 进入到/System/Libary/Extensions目录 备份IOBluetoothFamily.kext 在IOBluetoothFamily.kext右击，选择显示包内容 进入Contents/Plugins 右击BroadcomBluetoothHostControllerUSBTransport.kext，选择显示包内容 进入Contents 将Info.plist拖到桌面进行修改 在下面的代码中把PID和VID做对应的修改即可 1234567891011121314151617181920212223242526272829303132&lt;key&gt;PID 8684 0x21EC VID 2652 0xA5C&lt;/key&gt; &lt;dict&gt; &lt;key&gt;CFBundleIdentifier&lt;/key&gt; &lt;string&gt;com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport&lt;/string&gt; &lt;key&gt;Dongles&lt;/key&gt; &lt;dict&gt; &lt;key&gt;GMYLE&lt;/key&gt; &lt;string&gt;Micro Nano&lt;/string&gt; &lt;key&gt;IOGear&lt;/key&gt; &lt;string&gt;GBU-521&lt;/string&gt; &lt;key&gt;Kinivo&lt;/key&gt; &lt;string&gt;BTD-400&lt;/string&gt; &lt;key&gt;MediaLink&lt;/key&gt; &lt;string&gt;PANBT400 (4.0)&lt;/string&gt; &lt;key&gt;MediaLink 2&lt;/key&gt; &lt;string&gt;MUA-BA3&lt;/string&gt; &lt;key&gt;Plugable&lt;/key&gt; &lt;string&gt;4.0 LE&lt;/string&gt; &lt;key&gt;Targus&lt;/key&gt; &lt;string&gt;ACB10US 4.0&lt;/string&gt; &lt;key&gt;UtechSmart&lt;/key&gt; &lt;string&gt;4.0 (BCM20702)&lt;/string&gt; &lt;/dict&gt; &lt;key&gt;IOClass&lt;/key&gt; &lt;string&gt;BroadcomBluetoothHostControllerUSBTransport&lt;/string&gt; &lt;key&gt;IOProviderClass&lt;/key&gt; &lt;string&gt;IOUSBHostDevice&lt;/string&gt; &lt;key&gt;idProduct&lt;/key&gt; &lt;integer&gt;8684&lt;/integer&gt; &lt;key&gt;idVendor&lt;/key&gt; &lt;integer&gt;2652&lt;/integer&gt; &lt;/dict&gt;","tags":[{"name":"IT 技术","slug":"IT-技术","permalink":"https://peapon.github.io/tags/IT-技术/"}]},{"title":"【转载】怎样进行需求评审","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/【转载】怎样进行需求评审/","text":"原文链接 CSDN igreenhill问题描述：我们公司快要成立测试部了，之前我们一直是研发部下的测试小组，在成立之前，我们测试组集体讨论了下测试组成立前后的一些问题。其中一个难题就是需求，我们几个都没有相关的经验，所以我在此求助大家，邀大家来讨论下：如何进行需求评审？怎样的需求评审机制才是有效的？精彩回答： 关于需求评审，首先我觉得应该解决的是可用的评审可用资源问题，只有把这个问题解决了，其评审结果才可以采信，否则不过形式尔耳。 关于需求评审的一些必备资源，我这里选列了相关角色，如下列： * 业务专家或是熟悉该业务的人员（通常也叫业务方代表） * 文档审查人员 * 架构师 * 需求分析师 * 需求评审组织人员及记录人员 当然，除了人员意外，必要的时间、场地和上层决策者的支持也是不可或缺的。 这些资源一旦准备停当，接下来就是如何安排评审事宜的问题了。我这里简单列下以往曾做过的一轮需求评审的过程： * 准备阶段（P） o 争取上层决策者的支持与谅解 o 筹备相关的资源，包括人力、时间计划，评审场地 o 在正式评审之前，将相关的需求记录（文档或其他形式）发布给每个参与评审的人员手中，并确保其有足够的时间可以通阅需求并做好评审前的相关质疑与确认记录 o 在正式评审之前，会议组织者应先收集相关评审人员的各项需求评审建议和意见，对存在争议和疑惑的需求说明必须做好讨论的安排 o 发布经确认后的评审计划或时间表 * 实施阶段（D） o 由评审组织者召集各评审人员集中评议，可以以正式的会议等形式组织，此处以会议为形式做说明 o 与会人就某具体的问题进行讨论，讨论的优先级如下所列 * 最重要的业务内容，一般是按流程、功能、细节来排定 * 争议或疑问较多的地方 * 部分有争议的地方 * 对于没有提出疑义的地方，可以快速流过 o 最后，要注意一定要回顾已提出问题和有结论的地方 o 由会议记录人员整理会议的纲要，记录各与会人员的相关意见，并在会后递交纪要 * 检查再实施阶段（C） o 对评审得出结论的问题进行再次确认和修正补充 o 确定下次评审的时间 o 按照第一阶段的流程再次进行组织，并确认结果 o 对大多数组织，两次评审可以解决大部分的问题，对于悬而未决的问题，如影响范围有限，则可以延后讨论解决 * 总结阶段（A） o 就以上内容做最后的确认，需求定稿，各方签字确认。 o 今后的变更转入需求变更流程，其后产生的评审为小范围内评审。 4#给出了一项检查清单，作为文档审查人员审查需求的参考检查表使用，大家可以在进行需求评审时参考使用。 建议一：分层次评审 我们知道用户的需求是可以分层次的，一般而言可以分成如下的层次： * 目标性需求：定义了整个系统需要达到的目标； * 功能性需求：定义了整个系统必须完成的任务； * 操作性需求：定义了完成每个任务的具体的人机交互； 目标性需求是企业的高层管理人员所关注的，功能性需求是企业的中层管理人员所关注的，操作性需求是企业的具体操作人员所关注的。对不同层次的需求，其描述形式是有区别的，参与评审的人员也是不同的。如果让具体的操作人员去评审目标性需求，可能会很容易地导致“捡了芝麻，丢了西瓜”的现象，如果让高层的管理人员也去评审那些操作性需求，无疑是一种资源的浪费或者就会出现案例三的情形。 建议二：正式评审与非正式评审结合 正式评审是指通过开评审会的形式，组织多个专家，将需求涉及到的人员集合在一起，并定义好参与评审人员的角色和职责，对需求进行正规的会议评审。而非正式的评审并没有这种严格的组织形式，一般也不需要将人员集合在一起评审，而是通过电子邮件、文件汇签甚至是网络聊天等多种形式对需求进行评审。2种形式各有利弊，但往往非正式的评审比正式的评审效率更高，更容易发现问题。因此在评审时，应该更灵活地利用这2种方式。 建议三：分阶段评审 应该在需求形成的过程中进行分阶段的评审，而不是在需求最终形成后再进行评审。分阶段评审可以将原本需要进行的大规模评审拆分成各个小规模的评审，降低了需求返工的风险，提高了评审的质量。比如可以在形成目标性需求后进行一次评审，在形成系统的初次概要需求后进行一次评审，当对概要需求细分成几个部分，对每个部分进行各个评审，最终再对整体的需求进行评审。 建议四：精心挑选评审员 需求评审可能涉及的人员包括：需方的高层管理人员、中层管理人员、具体操作人员、IT主管、采购主管；供方的市场人员、需求分析人员、设计人员、测试人员、质量保证人员、实施人员、项目经理以及第三方的领域专家等等。在这些人员中由于大家所处的立场不同，对同一个问题的看法是不相同的，有些观点是和系统的目标有关系的，有些是关系不大的，不同的观点可能形成互补的关系。为了保证评审的质量和效率，需要精心挑选评审员。首先要保证使不同类型的人员的都要参与进来，否则很可能会漏掉了很重要的需求。其次在不同类型的人员中要选择那些真正和系统相关的，对系统有足够了解的人员参与进来，否则很可能使评审的效率降低或者最终不切实际的修改了系统的范围。 建议五：对评审员进行培训 在很多情况下，评审员是领域专家而不是进行评审活动的专家，他们没有掌握进行评审的方法、技巧、过程等，因此需要对评审员进行，同样对于主持评审的管理者也需要进行培训，以便于参与评审的人员能够紧紧围绕评审的目标来进行，能够控制评审活动的节奏，提高评审效率，避免发生案例一和案例二中出现的现象。对评审员的培训也可以区分为简单培训与详细培训2种。简单培训可能需要十几分钟或者几十分钟，需要将在评审过程中的需要把握的基本原则，需要注意的常见问题说清楚。详细培训则可能要需要对评审的方法、技巧、过程进行正式的培训，需要花费较长的时间，是一个独立的活动。需要注意的是被评审人员也要被培训。 建议六：充分利用需求评审检查单 需求检查单是很好的评审工具，需求检查单可以分成2类：需求形式的检查单和需求内容的检查单。需求形式的检查可以由QA人员负责，主要是针对需求文挡的格式是否符合质量标准来提出的，需求内容的检查是由评审员负责的，主要是检查需求内容是否达到了系统目标、是否有遗漏、是否有错误等等，这是需求评审的重点。检查单可以帮助评审员系统全面地发现需求中的问题，检查单也是随着工程财富的积累逐渐丰富和优化的。 建议七：建立标准的评审流程 对正规的需求评审会需要建立正规的需求评审流程，按照流程中定义的活动进行规范的评审过程。比如在评审流程定义中可能规定评审的进入条件，评审需要提交的资料，每次评审会议的人员职责分配，评审的具体步骤，评审通过的条件等等。通过评审流程执行可能会避免出现案例五之类的问题。 建议八：做好评审后的跟踪工作 在需求评审后，需要根据评审人员提出的问题进行评价，以确定哪些问题是必须纠正的，哪些可以不纠正，并给出充分的客观的理由与证据。当确定需要纠正的问题后，要形成书面的需求变更的申请，进入需求变更的管理流程，并确保变更的执行，在变更完成后，要进行复审。切忌评审完毕后，没有对问题进行跟踪，而无法保证评审结果的落实，使前期的评审努力付之东流。 建议九：充分准备评审 评审质量的好坏很大程度上取决于在评审会议前的准备活动。常出现的问题是，需求文档在评审会议前并没有提前下发给参与评审会议的人员，没有留出更多更充分的时间让参与评审的人员阅读需求文档。更有甚者，没有执行需求评审的进入条件，在评审文档中存在大量的低级的错误或者没有在评审前进行沟通，文档中存在方向性的错误，从而导致评审的效率很低，质量很差。对评审的准备工作，也应当定义一个检查单，在评审之前对照检查单落实每项准备工作。 一、 注意对需求规格说明的正确性进行评审 需求规格说明的正确性通常可以从如下方面得以体现： 1、是否有需求与其他需求相互冲突或者重复？ 2、是否清晰、简洁、无二义地表达了每个需求? “清晰”是让人能够读懂；“简洁”是让人愿意去读；“无二义”决定”读”的效果,是让大家对需求描述的理解能够达成一致 。 3、是否每个需求都通过了演示、测试、评审，分析是否得到了验证? 4、是否每个需求都在项目的范围内? 5、是否每个需求都没有内容和语法上的错误? 6、在现有的资源内, 是否能实现所有的需求? 7、每一条特定的错误信息，是否都是唯一的和具有含义的? 二、 注意对需求规格说明的实践性进行评审 所谓实践性是指需求本身是否来源于目前企业的相关业务规则和文件制度,而非源于分析师们经验主义的臆测。实践性是判断需求规格说明是不是理论联系实践、密切和用户联系的一个关键性指标。 三、 注意对需求规格说明的完整性进行评审 我们经常由下面的问题清单来评审需求说明书是否”完整” 。 1、编写的所有需求，其详细程度是否一致和合适? 2、需求是否能为设计提供足够的基础? 3、所有对其他需求的内部引用是否正确? 4、是否包含了每个需求的实现优先级? 5、是否定义了功能说明的内在算法? 6、是否包含了所有已知的客户需求或系统需求? 7、是否遗漏了必要的信息?如果有遗漏的话,把他们标记为待确定的问题(TBD) ? 8、是否对所有预期的错误条件所产生的系统行为都编制了文档? 需求说明的完整性主要体现在需求说明的详细程度上，我们怎样判断该需求的描述是否详细呢?我认为需求需要精化，而不是仅仅提出精化功能、对象要考虑涉众参与者、做些什么、需要什么数据信息、受什么业务规则和条件限制、系统会有什么响应，等等。 四、 注意对需求方案的可行性和成本预算进行评审 五、 注意对需求的质量属性进行评审 我们需要评审需求规格说明是否合理地确定了所有的性能目标，是否合理地确定了安全性方面要考虑到的问题。 六、 注意对需求的可实施性进行评审 是否对每个需求都设置了惟一性并且可以正确地识别它？是否每个功能需求都可以跟踪到高层需求（比如系统需求或用例）? 需求必须可以测试,每个需求在特定的输入条件下应当能给出已知的输出结果。同时,需求应当层次分明,需要把单个需求下面的相关需求综合在一起形成一组需求功能。 需求的可实施性除了可跟踪性还包括可测试性。事实上, 分析人员和测试人员在编写代码以前把需求模型,分析模型和测试用例综合起来通盘考虑，检查出遗漏的、错误的和不必要的需求。软件需求在概念上的测试是一种很必要的技术，它可以在项目早期阶段发现需求的歧义和错误。 七、 注意对需求包含的用例文档进行评审 用例是参与者对系统和参与者的交互过程所达成的一种契约。需求说明书基于用例的分析方法是也是当前较为流行的需求开发方式。用例文档作为需求重要的成果性文档也是需求评审主体之所在。需求评审确认的重点是对关键用户的最常用和最重要的用例进行深入和细致的评审,首先要通过测试用例的主干过程。而我们是否撰写有效的用例则要从以下方面着手评审。 1、用例的目标或价值度量是否明确? 2、用例是否是独立的分散任务? 3、是否明确说明可用用例会给哪些参与者带来用处? 4、编写用例的详细程度是否恰当?是否有不必要的设计和实现细节? 5、所有预期的分支过程是否都编写了文档说明? 6、所有预估的异常过程是否都编写了文档说明? 7、是否存在一些普通的动作序列可以分解成独立的用例? 8、每个路径的步骤是否都清晰明了,无歧义而且完整? 9、用例中的每个参与者和步骤是否都与所执行的任务有关? 10、用例中定义的每个可选路径是否都可行和可验证? 11、用例的前置条件和后置条件是否合理? 分析师必须确认用例的前置条件和后置条件准确界定了用例的边界范围,区分了用例和用例之间的界限。 八、 注意需求评审会的过程和结束标准 需求评审会的结果是对需求规格书完成了评审过程,那我们又如何判断审查的结束标准呢?请看如下几条建议: 1、审查期间评审员们提出的所有问题都已经解决。 2、相关文档中的所有更改都已经正确完成。 3、修订过的文档进行了拼写检查。 4、所有标识为TBD(待确定)的问题已经全部解决, 或者已经对每个TBD的问题的解决过程、计划解决的目标日期和责任解决人等编制了文档。 5 需求文档正式进入了配置库。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"业务分析方法","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/业务分析方法/","text":"本篇来介绍业务分析方法和如何获取用例。介绍一些常用的技术。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求变更管理","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/需求变更管理/","text":"变更的原因 我们错了（需求错了） 世界变了 变更是不可避免的，需求变更管理的目标是控制变更，不是避免变更。 变更管理的要点 统一渠道 统一平台","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求在医疗设备企业（一）","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/需求在医疗设备企业（一）/","text":"大家都知道医疗设备的管控上，是非常严格的，那么在医疗设备制造企业做需求管理是一种什么样的体验，我也说不清，但我可以从我工作的经历来聊一聊。 需求工程师的职责当然，聊工作前需要聊聊我的组织，我们需要干一些什么事情？ 临床场景分析 竞争对手的知识产权分析，专利撰写、商标申请 法规符合性的分析 临床调研 竞争对手分析 产品策划和产品策划方案输出 用户需求输出 产品需求输出 产品需求分解（子系统分解需求说明书）审核 软件需求输出 术语表（数据字典输出） 中文字符串组织评审 中文说明书审核 说明书评审 需求跟踪 软件需求功能确认，软件方案设计评审 与产品线和市场部排定需求优先级 产品资料发布（长期） 临床反馈收集和走访 不负责什么呢？ 项目进度跟踪 字符串表输出，只负责术语表的定义和中文字符串审核 英文字符串输出和英文说明书审核，资料和项目经理负责 硬件需求输出 模块需求输出 结构需求输出 附件需求输 我们很多职能其实并不是需求工程师的基本职能，从负责的工作上将，多数已经跨越了产品经理方面的工作。但实际上，需求工程师要做的核心工作还是需求的输入管理和转化，而周边相关工作应该淡化。我们这一系列的文章来谈谈我们怎么来做好需求管理或我们采取了什么措施做好需求管理。 需求分层复杂的事情简单化的两种基本思路：一是划分模块，也就是分割，化整为零；二是分层，割裂到各自的应用领域来解决，下图是《软件需求（第三版）》中关于软件需求分层的方法。上图的层次很清楚也很理想，第一层次的业务需求描述组织目标，第二层描述用户期望，第三层描述满足用户期望的方法。组织目标也就是商业目标，往往，在研发层面的需求工程师是较少接触的，这往往是产品经理、产品线经理（或其他类似职能经理）跟老板一起来做出的决策，也就是这是一个策划活动，与组织战略和企业目标相关。 医疗系统需求层次对于软件需求的分层的方法，我这里不继续展开叙述，但对于需求工程师来说，第二、三层才是重点。与我们的工作实际相关，实际上我接下来就是要谈我们的需求的分层，实际上，我们讲软件需求中提到的二、三两层的需求又划分了三个层次，如下图：接下来我们看看每一个层次的需求是用来定义生么的。 用户需求用户需求是需求捕获的产物。用户需求定义什么呢？用户需求是用来定义产品预期用途及用户主要的预期功能。 预期用途：描述产品主要的应用目的和场景和使用的预期效果。 举个例子，什么样的描述是预期用途，假设我们要做一个监护仪，它的预期用途可以这么描述：该产品在医疗单位中供有资质的医师操作，对成人、小儿和新生儿进行心电(ST 段测量和心律失常分析)、呼吸、体温、脉搏氧饱和度、脉率、无创血压、呼吸 二氧化 碳、成人和 3 岁以上小儿有创血压的监护。 用户主要的预期功能怎么说呢，还是举例来说明： XX-CRD-001 需求名称 支持心电监测 父需求编号 需求描述 能够进行人体的心电监测 这里描述的是非常高层的用户需要的需求，以用户的语言来描述，也许有人会质疑这种高层抽象的需求存在的必要性。那么从FDA 820 QSR来看，用户需求存在的理由还是很充分的，另外从流程V&amp;V的角度来讲，用户需求的存在也简化了Validation的复杂度，后边我会专门讲到流程。 产品需求产品需求是需求定义的产物。 子系统需求子系统需求是领域需求分析与建模的产物。","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求建模和表述的技术","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/需求建模和表述的技术/","text":"核心概念需求分析最常见的误会是需求分析可以将需求做出成为方案，这是最大的误区，需求应该是还原业务，应该以业务为线索，换句话说就是需求分析—–&gt;业务分析，但需求分析–X–&gt;方案分析。 什么是分析 分解 提炼 消除矛盾 实际上分析就是分解–&gt;提炼–&gt;消除矛盾这么一个过程。 分解分解是解决复杂问题的基本方法，也是有效的方法。 以业务流程为线索分解如下图，这种分解方法是按照目标系统-&gt;主题领域-&gt;业务事件-&gt;业务活动-&gt;业务步骤的过程分解下来，适用于信息系统类软件需求，信息系统类软件存在业务流，因此，采用此种结构较为合理。 程序结构为主线索分解（不推荐）这种分解结构以程序结构为主导，也是现在需求分析中最常见的方法，他割裂了与问题域之间的联系，容易导致问题域研究不足，降低需求质量和要求。 基于场景的分解结构，对于决策支持系统、面向用户的嵌入式系统而言，决策场景、使用场景就是主要的线索。怎么来理解这一句话呢？这类系统更多的是计算机辅助的角色，与信息系统的信息流不同的是这类系统往往需要更即时的反馈，用以支持现场的反馈，因此更多强调任务性，也就是使用场景。举个例子说明这个问题。 我们研发了一款产品，他的任务是解决护士查房任务中使用笔来记录测量结果，导致要重复录入的问题，那么这个产品软件的场景就是护士在查房中对多个病人的查房数据的管理需要。 这种系统适合按照回溯的方法来进行需求分析，如下图： 基于数据的分解结构，这种分解结构立足于程序内部的数据为主线索，这种分解对于需求分析师的要求是比较靠经于开发工程师的，至少要有开发经验。 提炼分解是一种自顶向下的一种分析技术，一般来说，分解的任何一线索都或破解其他线索的完整性，因此，分析师要建立全面的系统认识，进而进行自底向上的提炼，也可以把他叫成抽象。例如将每个业务中的类进行提炼，抽取公共部分，建立针对整个系统的全局领域模型。这其实已经涉及到设计的领域了。 消除矛盾消除矛盾是需求分析的一个必要过程，需求分析中，可能会出现相互矛盾、相互冲突的需求，这时候需要把收集的信息集中在一起，找到这些线索消除矛盾，分析影响范围。如有必要，需要进一步调研。 建模技术什么是建模和为什么要建模建模就是要把抽象的东西物化，这个就像开发商给你看的沙盘，开发商要说他的房子怎么好怎么好肯定不能手舞足蹈的在你面前比划，如果这样肯定卖不出去房子，因为这个太抽象了，大部分人是无法想象一个抽象的、空间的东西的，更不要说抽象的软件了。建模的目的就是为了可视化，什么是可视化呢？就是还原我们的想法和现实情况进行物化的表示。建模的方法也多种多样。一是可以采用基于现实的原型建模，包括低精度的和高精度的。 所谓低精度原型是指采用手绘等方法，快速还原你要设计的系统，适用于前期系统的沟通和需求的捕获，当然，也可以用在需求的初步分析上，这跟在咖啡厅的纸巾上创造是一个道理，这种方法的特点是可以快速的反应你的想法和确认你要得到的信息，弊端就是不正式，容易丢失； 所谓高精度原型是指采用计算机的方法，一比一还原要实现的系统，甚至能够实现一些基本的业务交互，这种适合于后期的需求细化和软件实现，对于需求的沟通非常有作用，这种方法的优点是可以还原真实的想法，甚至可以根据原型实现软件，弊端是工作量巨大，变更影响也巨大。 二是基于“设计语言”的设计建模，这也有很多方法，比如UML、BMPN,因此，选择合适的建模方法是很重要的。 建模的原则 不要为了建模而建模 最好的模型是与现实联系的 选择创建什么模型对如何动手解决问题和如何形成解决方案有深远影响 单个模型是不充分的，对每个重要的系统最好用一组几乎独立的模型去处理。 使用UMLUnified Modeling Language，是一种语言，很简单，语言是什么？语言是交流工具，那么语言的特点就是要统一大家才能听懂，所以这就是UML。从交流的层面来讲，UML也就是一个符号系统，某一种符号表示某一种意思，这样简单理解就可以了，不要搞得太复杂。 说到UML是一个符号系统，自然而然，符号系统就能按照自己的方式组织表达出一定的意思，这个在UML中就是图，我们来看看对需求分析和建模有帮助的几种图。 图名 功能 关注要点 用例图 说明角色和使用场景之间的关系 人 活动图 说明业务流程及业务活动的步骤 事 部署图 描述系统部署环境，体现设计约束 设计约束 组件图 说明主题域划分及他们之间的接口 接口 跨职能流程图跨职能流程图来源于商业建模领域。跨职能流程图显示进程中各步骤之间的关系以及执行它们的职能单位。可以使用跨职能流程图显示一个进程在各部门之间的流程，或者显示一个进程是如何影响公司中的不同职能单位的。这个图用来分析部门间或系统间的业务进程是比较适合的工具。可以看看示例： 用例图说用例图呢，其实有点片面。用例图是用来对用例分析技术执行结果的一种表示。用例分析技术包括用例图和用例描述，我们重点讲用例图。讲用例图必须把三个概念搞清楚： 概念 意义 参与者 任何系统外与系统进行有意义交互的人或事物 系统边界 逻辑概念，指“待开发系统”， 用例 在系统中执行的一系列动作，这些动作将生产特定执行者可见的价值结果 用例这里展开说一下用例，我们要明确几个点： 用例场景是有步骤的，是对一系列业务步骤组成的一个业务活动，所以用例不宜过小，譬如点击某一个“确认”按钮就可能不是一个用例； 用例场景是有目标的，能为参与者带来有价值的结果； 用例是对一组用例实例的抽象，也就是说用例是有路径的。 用例图图例参与者：用一个火柴人表示 系统边界：用一个边框表示系统内外的分解 用例：用一个椭圆表示 他们组合在一起就是这个样子： 关系 参与者与用例之间的关系，参与者与用例之间是一种通信关系，使用一根带箭头或者不带箭头的线来表示，表示任何一方都可以发送和接收消息。 用例与用例之间的关系包括包含、扩展和泛化，表示方法如下： 包含关系： 表示基础用例在某一个位置显式的合并了另一个用例的行为，箭头方向从基用例到被包含用例，看一个例子： 回顾数据是一个基用例，表示系统提供数据回顾的功能，护士可以通过这个功能“回顾数据”，“打印数据”是被包含用例，表示“回顾数据”之下还包含了“打印数据”这个功能。因此被包含用例不是孤立的，而是基用例的一部分。 扩展关系：基用例在间接说明的位置上隐式的合并了另外一个用例的行为，箭头方向是从扩展用例到基用例，还是先看一个例子：“打印报警列表”是一个完整的功能，但打印的前提是打印机就绪或空闲，因此“检查打印机状态”用例是可以被隐式的调用的，这种用例由系统提供，可以不与参与者进行交互。 泛化关系：本质是一种父子关系，泛化的用例继承了父用例的行为，子用例可以增加或覆盖父用例的行为，子用例可以出现在父用例出现的任何位置。箭头方向指向父用例。看一个例子：这是一个很显式的父子关系，用户可以使用任何替代方案去付款。 用例图绘制的注意事项： 使用动宾短语描述用例；不要为了好看去过分的扩展，细节的内容可以在用例描述中去扩展。 关于用例获取的方法，会在另外一篇文章来介绍，这里不再深入。 活动图活动图是用来描述用例内部流程的一种图。当然活动图还可以用来表述其他过程机理、业务过程及工作流等，所以跟流程图有点类似，甚至表示的东西都差不多。区别是活动图是一种面向对象的表述和支持并行流程。活动图的表示符号：活动图的好处是可以清晰的看到业务发生的过程，如果说用例是一个高层次的抽象，活动图则是一个细节层次的的描述，因此用例与活动图的配合可以起到很好的效果。可以看如下的示例： 组件图部署图需求描述的方式和方法需求的描述，应该达到下面两个目标： 任何阅读需求的人对需求的解读是一致的，不存在歧义性； 每一个读者的解读都与作者试图表达的意思是一致的。 自然语言功能需求的描述，可以从系统运行或者用户使用的角度来写。应该用一致的表达风格来表述需求。 对于从系统运行角度表述需求的方法，可以采用下面的表述： 【可选的前置条件】【可选的前置条件】系统应该【期望的系统响应】 例如： SRS-002 在已经打开了心电参数监测开关时，系统运行主界面应该始终显示至少一通道的心电波形。 对于从用户的角度来表述需求的方法，可以采用下面的表述： 某个【用户类别或者角色名称】应该能够【对某个对象】【做某事】【限定条件、响应时间或质量描述】 例如： SRS-001 仪器的操作人员应该能够通过参数开关打开或关闭心电参数的监测。 为了更清楚的表达需求，我们可以将从用户角度和系统角度的需求联合起来，混合的表达，比如： SRS-001 仪器的操作人员应该能够通过参数开关打开或关闭心电参数的监测。 SRS-002 在已经打开了心电参数监测开关时，系统运行主界面应该始终显示至少一通道的心电波形。 SRS-003 在仪器关闭心电参数监测开关时，系统运行的主界面应该不显示心电参数的任何信息，对应的心电参数显示区域应该能够被其他参数显示使用。 当然，我们在从用户角度描述功能需求的时候，对于不同用户类别的功能，应该加以区分，并明确的做出说明，比如 用户类别 对操作的要求 仪器操作人员 仪器的基本操作者，其操作应该是在使用设备时，对其操作不做限制，可以没有附加条件的对设备的测量、系统输出等进行设置和操作。 仪器管理人员 仪器管理人员是仪器的管理者，能够对涉及病人安全、操作者安全相关的设置进行操作，仪器管理人员在进行仪器的设置和修改时，需要恰当的授权。 仪器服务人员 仪器的厂家或授权的服务人员，能够对涉及仪器的精度、基本性能方面的操作进行设置，仪器服务人员在进行仪器的修改和设置是，需要恰当的授权。 在这种条件下，我们在需求中可以根据不同的用户类别去表述不同的需求，且不会引入太多的沟通。 写作风格需求分析师要记住这一点，需求文档不是文学作品。因此不用在需求文档中去展现你的文采和学识，要在需求文档中去展现你的逻辑思维，因此编写需求文档时，要注意： 简洁和明确，语法，断句要正确。尽量使用短句；举个例子： 系统应该提供参数开关的能力修改为系统应该能够打开或关闭参数则更加简洁明了 术语定义和字典，对于术语，要采用统一的术语定义，对于专有名词，要有字典； 使用关键词应该，并对使用的关键词进行定义，比如 应该是系统应当具备这样的功能 需求条目独立，避免使用大段文字表述多个需求，还是看前面的例子 SRS-001 仪器的操作人员应该能够通过参数开关打开或关闭心电参数的监测。SRS-002 在已经打开了心电参数监测开关时，系统运行主界面应该始终显示至少一通道的心电波形。SRS-003 在仪器关闭心电参数监测开关时，系统运行的主界面应该不显示心电参数的任何信息，对应的心电参数显示区域应该能够被其他参数显示使用。应该修改为下面的表述SRS-001 仪器的操作人员应该能够通过参数开关打开或关闭心电参数的监测。 SRS-002 在已经打开了心电参数监测开关时，系统运行主界面应该始终显示至少一通道的心电波形。 SRS-003 在仪器关闭心电参数监测开关时，系统运行的主界面应该不显示心电参数的任何信息，对应的心电参数显示区域应该能够被其他参数显示使用。 Note：那么什么时候应该这样写呢？判断依据很简单，你写的一段文字中有多个句子都可以独立测试。 主动语态，主动语态能更清晰的表述出谁是使动者。 图文并茂规格化如何选择适合自己的谈谈用户界原型好处弊端","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求的粒度的思考","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/需求的粒度的思考/","text":"什么叫需求的粒度什么样的粒度合适及为什么有效的沟通","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"需求管理指南","date":"2017-10-22T05:44:43.000Z","path":"2017/10/22/需求管理指南/","text":"","tags":[{"name":"需求管理","slug":"需求管理","permalink":"https://peapon.github.io/tags/需求管理/"}]},{"title":"[转载官方]Markdown 语法和 MWeb 写作使用说明","date":"2017-10-21T16:00:00.000Z","path":"2017/10/22/Markdown 语法和 MWeb 写作使用说明/","text":"Markdown 的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的目的：用來作為一種網路內容的寫作用語言。 本文约定如果有写 效果如下：， 在 MWeb 编辑状态下只有用 CMD + 4 或 CMD + R 预览才可以看效果。 标题Markdown 语法： 123# 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` 效果如下： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第六级标题 &lt;h6&gt;强调Markdown 语法： 12345*这些文字会生成`&lt;em&gt;`*_这些文字会生成`&lt;u&gt;`_**这些文字会生成`&lt;strong&gt;`**__这些文字会生成`&lt;strong&gt;`__ 在 MWeb 中的快捷键为： CMD + U、CMD + I、CMD + B效果如下： 这些文字会生成&lt;em&gt;这些文字会生成&lt;u&gt; 这些文字会生成&lt;strong&gt;这些文字会生成&lt;strong&gt; 换行四个及以上空格加回车。如果不想打这么多空格，只要回车就为换行，请勾选：Preferences - Themes - Translate newlines to &lt;br&gt; tags 列表无序列表Markdown 语法： 1234* 项目一 无序列表 `* + 空格键`* 项目二* 项目二的子项目一 无序列表 `TAB + * + 空格键`* 项目二的子项目二 在 MWeb 中的快捷键为： Option + U效果如下： 项目一 无序列表 * + 空格键 项目二 项目二的子项目一 无序列表 TAB + * + 空格键 项目二的子项目二 有序列表Markdown 语法： 123451. 项目一 有序列表 `数字 + . + 空格键`2. 项目二 3. 项目三1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`2. 项目三的子项目二 效果如下： 项目一 有序列表 数字 + . + 空格键 项目二 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 项目三的子项目二 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 图片Markdown 语法： 12![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)格式: ![Alt Text](url) Control + Shift + I 可插入Markdown语法。如果是 MWeb 的文档库中的文档，还可以用拖放图片、CMD + V 粘贴、CMD + Option + I 导入这三种方式来增加图片。效果如下： MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 -w + 图片宽度 即可，比如说要设置上面的图片的宽度为 140，语法如下： 链接Markdown 语法： 123email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接 &lt;http://www.github.com/&gt; Control + Shift + L 可插入Markdown语法。如果是 MWeb 的文档库中的文档，拖放或CMD + Option + I 导入非图片时，会生成连接。效果如下： Email 连接： &#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;连接标题Github网站自动生成连接像： http://www.github.com/ 这样 区块引用Markdown 语法： 123某某说:&gt; 第一行引用&gt; 第二行费用文字 CMD + Shift + B 可插入Markdown语法。效果如下： 某某说: 第一行引用第二行费用文字 行内代码Markdown 语法： 1像这样即可：`&lt;addr&gt;` `code` CMD + K 可插入Markdown语法。效果如下： 像这样即可：&lt;addr&gt; code 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; CMD + Shift + K 可插入Markdown语法。效果如下： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 顺序图或流程图Markdown 语法： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 &lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt; 效果如下（ Preferences - Themes - Enable sequence &amp; flow chart 才会看到效果 ）： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 更多请参考：http://bramp.github.io/js-sequence-diagrams/, http://adrai.github.io/flowchart.js/ 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： 删除这些 效果如下： 加删除线像这样用： 删除这些 分隔线以下三种方式都可以生成分隔线： 12345********- - - 效果如下： MathJaxMarkdown 语法： 12345678块级公式：$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$\\\\[ \\frac&#123;1&#125;&#123;\\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;\\frac25 \\pi&#125;&#125; =1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;&#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\ldots&#125; &#125; &#125; &#125; \\\\]行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 效果如下（Preferences - Themes - Enable MathJax 才会看到效果）： 块级公式：$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ \\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } \\] 行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 脚注（Footnote）Markdown 语法： 1这是一个脚注：[^sample_footnote] 效果如下： 这是一个脚注：^sample_footnote 注释和阅读更多 Actions-&gt;Insert Read More Comment 或者 Command + .注 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。 TOCMarkdown 语法： 1[TOC] 效果如下： [TOC] st=>start: 开始 e=>end: 结束 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond cond(yes)->e cond(no)->op{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);st=>start: 开始 e=>end: 结束 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond cond(yes)->e cond(no)->op{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);","tags":[{"name":"帮助","slug":"帮助","permalink":"https://peapon.github.io/tags/帮助/"}]}]